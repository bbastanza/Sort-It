{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Visualizer.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { initialArray as initArray, initialChartValue as initChart } from \"./../helpers/initialValues\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport { delayUpdate } from \"./../helpers/delayUpdate\";\nimport DotAnimation from \"./DotAnimation\";\nimport SortTypeButtons from \"./SortTypeButtons\";\nimport SizeSlider from \"./SizeSlider\";\nimport ActionButtons from \"./ActionButtons\";\nimport Chart from \"./Chart\";\nexport default function Visualizer() {\n  _s();\n\n  const [isSorting, setIsSorting] = useState(false);\n  const [canSort, setCanSort] = useState(false);\n  const [sortType, setSortType] = useState(\"bubble\");\n  const [dataArray, setDataArray] = useState(initArray);\n  const [chartData, setChartData] = useState(initChart);\n  const orangeValueRef = useRef(0);\n  const pinkValueRef = useRef(0);\n  const timeDelayRef = useRef(80);\n  const arrayRef = useRef(dataArray);\n  arrayRef.current = dataArray;\n  useEffect(() => {\n    timeDelayRef.current = calculateTimeDelay(dataArray.length, sortType);\n  }, [dataArray.length, sortType]);\n  useEffect(() => {\n    let colors = [];\n\n    if (isSorting) {\n      for (const number of arrayRef.current) {\n        if (number === orangeValueRef.current) colors.push(\"#FF7700\");else if (number === pinkValueRef.current) colors.push(\"#ff8686\");else colors.push(\"#377E86\");\n      }\n    } else {\n      orangeValueRef.current = 0;\n      pinkValueRef.current = 0;\n      colors = \"#377E86\";\n    }\n\n    setChartData({\n      labels: arrayRef.current,\n      datasets: [{\n        label: \"value\",\n        data: arrayRef.current,\n        backgroundColor: colors\n      }]\n    });\n  }, [dataArray, isSorting]);\n\n  async function updateVisualization(pinkValue, orangeValue = 0) {\n    pinkValueRef.current = pinkValue;\n    orangeValueRef.current = orangeValue;\n    setDataArray([...dataArray]);\n    await delayUpdate(timeDelayRef.current);\n  }\n\n  async function bubbleSort() {\n    let isSorted = false;\n\n    while (!isSorted) {\n      for (let i = 0; i < dataArray.length; i++) {\n        isSorted = true;\n\n        for (let j = 1; j < dataArray.length - i; j++) {\n          await updateVisualization(dataArray[j], dataArray[j - 1]);\n\n          if (dataArray[j] < dataArray[j - 1]) {\n            bubbleswap(dataArray, j, j - 1);\n            isSorted = false;\n          }\n        }\n      }\n    }\n  }\n\n  async function insertionSort() {\n    orangeValueRef.current = 0;\n\n    for (let i = 1; i < dataArray.length; i++) {\n      let current = dataArray[i];\n      let j = i - 1;\n\n      while (j >= 0 && dataArray[j] > current) {\n        dataArray[j + 1] = dataArray[j];\n        j--;\n        dataArray[j + 1] = current;\n        await updateVisualization(dataArray[j], dataArray[j + 1]);\n      }\n    }\n\n    setDataArray([...dataArray]);\n  }\n\n  async function selectionSort() {\n    for (let i = 0; i < dataArray.length; i++) {\n      let minimumIdx = i;\n\n      for (let j = i + 1; j < dataArray.length; j++) {\n        if (dataArray[j] < dataArray[minimumIdx]) {\n          minimumIdx = j;\n        }\n\n        await updateVisualization(dataArray[j], dataArray[minimumIdx]);\n      }\n\n      if (minimumIdx !== i) {\n        const temp = dataArray[minimumIdx];\n        dataArray[minimumIdx] = dataArray[i];\n        dataArray[i] = temp;\n      }\n    }\n\n    setDataArray([...dataArray]);\n  }\n\n  async function mergeSort() {\n    const length = dataArray.length;\n\n    for (let currentSize = 1; currentSize <= length - 1; currentSize = currentSize * 2) {\n      for (let leftStart = 0; leftStart < length - 1; leftStart += currentSize * 2) {\n        const middle = leftStart + currentSize - 1;\n        const rightEnd = Math.min(leftStart + currentSize * 2 - 1, length - 1);\n        await merge(dataArray, leftStart, middle, rightEnd);\n      }\n    }\n  }\n\n  async function merge(array, left, middle, right) {\n    const firstNumber = middle - left + 1;\n    const secondNumber = right - middle;\n    let i;\n    let j;\n    const leftTempArray = [firstNumber];\n    const rightTempArray = [secondNumber];\n\n    for (i = 0; i < firstNumber; i++) {\n      leftTempArray[i] = array[left + i];\n    }\n\n    for (j = 0; j < secondNumber; j++) {\n      rightTempArray[j] = array[middle + 1 + j];\n    }\n\n    i = 0;\n    j = 0;\n\n    while (i < firstNumber && j < secondNumber) {\n      if (leftTempArray[i] <= rightTempArray[j]) {\n        if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n        i++;\n        await updateVisualization(array[left - 1]);\n      } else {\n        if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n        j++;\n        await updateVisualization(0, array[left - 1]);\n      }\n\n      left++;\n    }\n\n    while (i < firstNumber) {\n      if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n      i++;\n      left++;\n      await updateVisualization(array[left - 1]);\n    }\n\n    while (j < secondNumber) {\n      if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n      j++;\n      left++;\n      await updateVisualization(0, array[left - 1]);\n    }\n\n    await updateVisualization(0);\n  }\n\n  async function quickSort(dataArray, start = 0, end = dataArray.length - 1) {\n    if (start >= end) return;\n    let index = await partition(dataArray, start, end);\n    await updateVisualization(dataArray[start]);\n    quickSort(dataArray, start, index - 1);\n    await updateVisualization(dataArray[start]);\n    quickSort(dataArray, index + 1, end);\n  }\n\n  async function partition(dataArray, start, end) {\n    let pivotIndex = start;\n    let pivotValue = dataArray[end];\n\n    for (let i = start; i < end; i++) {\n      if (dataArray[i] < pivotValue) {\n        bubbleswap(dataArray, i, pivotIndex);\n        pivotIndex++;\n      }\n    }\n\n    await updateVisualization(start);\n    bubbleswap(dataArray, pivotIndex, end);\n    await updateVisualization(start);\n    return pivotIndex;\n  }\n\n  async function performSort() {\n    setCanSort(false);\n    setIsSorting(true);\n\n    switch (sortType) {\n      case \"bubble\":\n        await bubbleSort();\n        break;\n\n      case \"insertion\":\n        await insertionSort();\n        break;\n\n      case \"merge\":\n        await mergeSort();\n        break;\n\n      case \"quick\":\n        quickSort(dataArray);\n        break;\n\n      default:\n        await selectionSort();\n    }\n\n    setIsSorting(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      children: [sortType, \" Sort\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), !isSorting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ActionButtons, {\n        performSort: performSort,\n        setCanSort: setCanSort,\n        dataArray: dataArray,\n        setDataArray: setDataArray,\n        canSort: canSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SizeSlider, {\n        value: dataArray.length,\n        setCanSort: setCanSort,\n        setDataArray: setDataArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SortTypeButtons, {\n        setSortType: setSortType,\n        sortType: sortType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(DotAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Visualizer, \"nm05ETzQiW+JOtsKxnUHhaoBQ4g=\");\n\n_c = Visualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Visualizer.tsx"],"names":["useState","useRef","useEffect","initialArray","initArray","initialChartValue","initChart","calculateTimeDelay","bubbleswap","delayUpdate","DotAnimation","SortTypeButtons","SizeSlider","ActionButtons","Chart","Visualizer","isSorting","setIsSorting","canSort","setCanSort","sortType","setSortType","dataArray","setDataArray","chartData","setChartData","orangeValueRef","pinkValueRef","timeDelayRef","arrayRef","current","length","colors","number","push","labels","datasets","label","data","backgroundColor","updateVisualization","pinkValue","orangeValue","bubbleSort","isSorted","i","j","insertionSort","selectionSort","minimumIdx","temp","mergeSort","currentSize","leftStart","middle","rightEnd","Math","min","merge","array","left","right","firstNumber","secondNumber","leftTempArray","rightTempArray","quickSort","start","end","index","partition","pivotIndex","pivotValue","performSort","marginTop","textTransform"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport {\n    initialArray as initArray,\n    initialChartValue as initChart,\n} from \"./../helpers/initialValues\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport { IChartData } from \"../helpers/interfaces\";\nimport { delayUpdate } from \"./../helpers/delayUpdate\";\nimport DotAnimation from \"./DotAnimation\";\nimport SortTypeButtons from \"./SortTypeButtons\";\nimport SizeSlider from \"./SizeSlider\";\nimport ActionButtons from \"./ActionButtons\";\nimport Chart from \"./Chart\";\nimport { quickSort } from \"../referenceAlgorithms/quickSort\";\n\nexport default function Visualizer() {\n    const [isSorting, setIsSorting] = useState<boolean>(false);\n    const [canSort, setCanSort] = useState<boolean>(false);\n    const [sortType, setSortType] = useState<string>(\"bubble\");\n    const [dataArray, setDataArray] = useState<number[]>(initArray);\n    const [chartData, setChartData] = useState<IChartData>(initChart);\n    const orangeValueRef = useRef<number>(0);\n    const pinkValueRef = useRef<number>(0);\n    const timeDelayRef = useRef<number>(80);\n    const arrayRef = useRef<number[]>(dataArray);\n    arrayRef.current = dataArray;\n\n    useEffect((): void => {\n        timeDelayRef.current = calculateTimeDelay(dataArray.length, sortType);\n    }, [dataArray.length, sortType]);\n\n    useEffect((): void => {\n        let colors: any = [];\n        if (isSorting) {\n            for (const number of arrayRef.current) {\n                if (number === orangeValueRef.current) colors.push(\"#FF7700\");\n                else if (number === pinkValueRef.current)\n                    colors.push(\"#ff8686\");\n                else colors.push(\"#377E86\");\n            }\n        } else {\n            orangeValueRef.current = 0;\n            pinkValueRef.current = 0;\n            colors = \"#377E86\";\n        }\n\n        setChartData({\n            labels: arrayRef.current,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: arrayRef.current,\n                    backgroundColor: colors,\n                },\n            ],\n        });\n    }, [dataArray, isSorting]);\n\n    async function updateVisualization(\n        pinkValue: number,\n        orangeValue: number = 0\n    ): Promise<void> {\n        pinkValueRef.current = pinkValue;\n        orangeValueRef.current = orangeValue;\n        setDataArray([...dataArray]);\n        await delayUpdate(timeDelayRef.current);\n    }\n\n    async function bubbleSort(): Promise<void> {\n        let isSorted: boolean = false;\n        while (!isSorted) {\n            for (let i = 0; i < dataArray.length; i++) {\n                isSorted = true;\n                for (let j = 1; j < dataArray.length - i; j++) {\n                    await updateVisualization(dataArray[j], dataArray[j - 1]);\n                    if (dataArray[j] < dataArray[j - 1]) {\n                        bubbleswap(dataArray, j, j - 1);\n                        isSorted = false;\n                    }\n                }\n            }\n        }\n    }\n\n    async function insertionSort(): Promise<void> {\n        orangeValueRef.current = 0;\n        for (let i = 1; i < dataArray.length; i++) {\n            let current: number = dataArray[i];\n            let j: number = i - 1;\n            while (j >= 0 && dataArray[j] > current) {\n                dataArray[j + 1] = dataArray[j];\n                j--;\n                dataArray[j + 1] = current;\n                await updateVisualization(dataArray[j], dataArray[j + 1]);\n            }\n        }\n        setDataArray([...dataArray]);\n    }\n\n    async function selectionSort(): Promise<void> {\n        for (let i = 0; i < dataArray.length; i++) {\n            let minimumIdx = i;\n            for (let j = i + 1; j < dataArray.length; j++) {\n                if (dataArray[j] < dataArray[minimumIdx]) {\n                    minimumIdx = j;\n                }\n                await updateVisualization(dataArray[j], dataArray[minimumIdx]);\n            }\n            if (minimumIdx !== i) {\n                const temp = dataArray[minimumIdx];\n                dataArray[minimumIdx] = dataArray[i];\n                dataArray[i] = temp;\n            }\n        }\n        setDataArray([...dataArray]);\n    }\n\n    async function mergeSort(): Promise<void> {\n        const length: number = dataArray.length;\n        for (\n            let currentSize: number = 1;\n            currentSize <= length - 1;\n            currentSize = currentSize * 2\n        ) {\n            for (\n                let leftStart = 0;\n                leftStart < length - 1;\n                leftStart += currentSize * 2\n            ) {\n                const middle = leftStart + currentSize - 1;\n                const rightEnd = Math.min(\n                    leftStart + currentSize * 2 - 1,\n                    length - 1\n                );\n                await merge(dataArray, leftStart, middle, rightEnd);\n            }\n        }\n    }\n\n    async function merge(\n        array: number[],\n        left: number,\n        middle: number,\n        right: number\n    ): Promise<void> {\n        const firstNumber: number = middle - left + 1;\n        const secondNumber: number = right - middle;\n        let i: number;\n        let j: number;\n\n        const leftTempArray: number[] = [firstNumber];\n        const rightTempArray: number[] = [secondNumber];\n\n        for (i = 0; i < firstNumber; i++) {\n            leftTempArray[i] = array[left + i];\n        }\n        for (j = 0; j < secondNumber; j++) {\n            rightTempArray[j] = array[middle + 1 + j];\n        }\n\n        i = 0;\n        j = 0;\n        while (i < firstNumber && j < secondNumber) {\n            if (leftTempArray[i] <= rightTempArray[j]) {\n                if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n                i++;\n                await updateVisualization(array[left - 1]);\n            } else {\n                if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n                j++;\n                await updateVisualization(0, array[left - 1]);\n            }\n            left++;\n        }\n        while (i < firstNumber) {\n            if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n            i++;\n            left++;\n            await updateVisualization(array[left - 1]);\n        }\n        while (j < secondNumber) {\n            if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n            j++;\n            left++;\n            await updateVisualization(0, array[left - 1]);\n        }\n        await updateVisualization(0);\n    }\n\n    async function quickSort(\n        dataArray: number[],\n        start: number = 0,\n        end: number = dataArray.length - 1\n    ): Promise<void> {\n        if (start >= end) return;\n        let index = await partition(dataArray, start, end);\n        await updateVisualization(dataArray[start]);\n        quickSort(dataArray, start, index - 1);\n        await updateVisualization(dataArray[start]);\n        quickSort(dataArray, index + 1, end);\n    }\n\n    async function partition(\n        dataArray: number[],\n        start: number,\n        end: number\n    ): Promise<number> {\n        let pivotIndex = start;\n        let pivotValue = dataArray[end];\n        for (let i = start; i < end; i++) {\n            if (dataArray[i] < pivotValue) {\n                bubbleswap(dataArray, i, pivotIndex);\n                pivotIndex++;\n            }\n        }\n        await updateVisualization(start);\n        bubbleswap(dataArray, pivotIndex, end);\n        await updateVisualization(start);\n        return pivotIndex;\n    }\n\n    async function performSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        switch (sortType) {\n            case \"bubble\":\n                await bubbleSort();\n                break;\n            case \"insertion\":\n                await insertionSort();\n                break;\n            case \"merge\":\n                await mergeSort();\n                break;\n            case \"quick\":\n                quickSort(dataArray);\n                break;\n            default:\n                await selectionSort();\n        }\n        setIsSorting(false);\n    }\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <Chart data={chartData} />\n            <h2 style={{ textTransform: \"capitalize\" }}>{sortType} Sort</h2>\n            {!isSorting ? (\n                <>\n                    <ActionButtons\n                        performSort={performSort}\n                        setCanSort={setCanSort}\n                        dataArray={dataArray}\n                        setDataArray={setDataArray}\n                        canSort={canSort}\n                    />\n                    <SizeSlider\n                        value={dataArray.length}\n                        setCanSort={setCanSort}\n                        setDataArray={setDataArray}\n                    />\n                    <SortTypeButtons\n                        setSortType={setSortType}\n                        sortType={sortType}\n                    />\n                </>\n            ) : (\n                <DotAnimation />\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
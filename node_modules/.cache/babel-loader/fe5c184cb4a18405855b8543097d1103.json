{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport DotAnimation from \"./DotAnimation\";\nimport { shuffleArray, initialArray as initArray } from \"../helpers/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { changeSize } from \"../helpers/changesize\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nexport default function Array() {\n  _s();\n\n  const initialArray = shuffleArray(initArray);\n  const [isSorting, setIsSorting] = useState(false);\n  const [sortType, setSortType] = useState(\"bubble\");\n  const [canSort, setCanSort] = useState(true);\n  const [dataArray, setDataArray] = useState(initialArray);\n  const orangeValueRef = useRef(0);\n  const pinkValueRef = useRef(0);\n  const [chartData, setChartData] = useState({\n    labels: initialArray,\n    datasets: [{\n      label: \"value\",\n      data: initialArray,\n      backgroundColor: \"#377E86\",\n      borderColor: \"#313131\"\n    }]\n  });\n  const arrayRef = useRef([]);\n  arrayRef.current = dataArray;\n  useEffect(() => {\n    let colors = [];\n    if (!isSorting) colors = \"#377E86\";else {\n      for (const number of arrayRef.current) {\n        if (number === orangeValueRef.current) colors.push(\"#FF7700\");else if (number === pinkValueRef.current) colors.push(\"#ff8686\");else colors.push(\"#377E86\");\n      }\n    }\n    setChartData({\n      labels: arrayRef.current,\n      datasets: [{\n        label: \"value\",\n        data: arrayRef.current,\n        backgroundColor: colors,\n        borderColor: \"#313131\"\n      }]\n    });\n  }, [dataArray, isSorting]);\n\n  async function bubbleSort() {\n    setCanSort(false);\n    setIsSorting(true);\n    let isSorted = false;\n\n    while (!isSorted) {\n      for (let i = 0; i < dataArray.length; i++) {\n        isSorted = true;\n\n        for (let j = 1; j < dataArray.length - i; j++) {\n          await new Promise(resolve => setTimeout(resolve, calculateTimeDelay(dataArray.length)));\n\n          if (dataArray[j] < dataArray[j - 1]) {\n            const updatedArray = bubbleswap(dataArray, j, j - 1);\n            pinkValueRef.current = dataArray[j + 1];\n            orangeValueRef.current = dataArray[j];\n            setDataArray([...updatedArray]);\n            isSorted = false;\n          } else {\n            pinkValueRef.current = dataArray[j + 1];\n            orangeValueRef.current = dataArray[j];\n            setDataArray([...dataArray]);\n          }\n        }\n      }\n    }\n\n    pinkValueRef.current = 0;\n    setIsSorting(false);\n  }\n\n  async function insertionSort() {\n    setCanSort(false);\n    setIsSorting(true);\n    orangeValueRef.current = 0;\n\n    for (let i = 1; i < dataArray.length; i++) {\n      let current = dataArray[i];\n      let j = i - 1;\n\n      while (j >= 0 && dataArray[j] > current) {\n        // await new Promise((resolve: any) =>\n        //     setTimeout(resolve, calculateTimeDelay(dataArray.length))\n        // );\n        dataArray[j + 1] = dataArray[j];\n        j--;\n        dataArray[j + 1] = current;\n        await updateValues(dataArray[j - 1], dataArray[j]); // pinkValueRef.current = dataArray[j];\n        // orangeValueRef.current = dataArray[j + 1];\n        // setDataArray([...dataArray]);\n      }\n    }\n\n    setDataArray([...dataArray]);\n    setIsSorting(false);\n  }\n\n  async function selectionSort() {\n    setCanSort(false);\n    setIsSorting(true);\n    pinkValueRef.current = 1;\n    orangeValueRef.current = 0;\n\n    for (let i = 0; i < dataArray.length; i++) {\n      let minimumIdx = i;\n\n      for (let j = i + 1; j < dataArray.length; j++) {\n        if (dataArray[j] < dataArray[minimumIdx]) {\n          minimumIdx = j;\n        }\n\n        await updateValues(dataArray[j], dataArray[minimumIdx]);\n      }\n\n      if (minimumIdx !== i) {\n        const temp = dataArray[minimumIdx];\n        dataArray[minimumIdx] = dataArray[i];\n        dataArray[i] = temp;\n      }\n    }\n\n    setDataArray([...dataArray]);\n    setIsSorting(false);\n  }\n\n  async function updateValues(pinkValue, orangeValue) {\n    pinkValueRef.current = pinkValue;\n    orangeValueRef.current = orangeValue;\n    setDataArray([...dataArray]);\n    await new Promise(resolve => setTimeout(resolve, calculateTimeDelay(dataArray.length)));\n  }\n\n  function runMergeSort() {\n    const newArray = mergeSort(dataArray);\n    setDataArray([...newArray]);\n  }\n\n  function mergeSort(array) {\n    const half = array.length / 2;\n    if (array.length < 2) return array;\n    const left = array.splice(0, half);\n    return merge(mergeSort(left), mergeSort(array));\n  }\n\n  function merge(left, right) {\n    const newArray = [];\n\n    while (!!left.length && !!right.length) {\n      if (left[0] < right[0]) newArray.push(left.shift());else newArray.push(right.shift());\n    }\n\n    return [...newArray, ...left, ...right];\n  }\n\n  function sortArray() {\n    if (canSort) {\n      switch (sortType) {\n        case \"bubble\":\n          bubbleSort();\n          break;\n\n        case \"insertion\":\n          insertionSort();\n          break;\n\n        case \"merge\":\n          runMergeSort();\n          break;\n\n        case \"quick\":\n          // quickSort();\n          break;\n\n        default:\n          selectionSort();\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          maintainAspectRatio: false,\n          animation: false,\n          legend: {\n            display: false\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), !isSorting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textTransform: \"capitalize\"\n        },\n        children: [sortType, \" Sort\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"15px 0 0\",\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: [canSort ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-lg btn-info sort-btn\",\n          onClick: sortArray,\n          children: \"Sort It!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 29\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary sort-btn\",\n          onClick: () => {\n            setCanSort(true);\n            const newArray = shuffleArray(dataArray);\n            setDataArray([...newArray]);\n          },\n          children: \"Shuffle Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Array Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"25\",\n        max: \"125\",\n        step: \"20\",\n        value: dataArray.length,\n        className: \"slider\",\n        onChange: e => {\n          setCanSort(true);\n          setDataArray([...changeSize(parseInt(e.target.value))]);\n        },\n        style: {\n          width: \"20vw\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"bubble\", sortType),\n          onClick: () => setSortType(\"bubble\"),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"insertion\", sortType),\n          onClick: () => setSortType(\"insertion\"),\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          name: \"selection\",\n          className: buttonClass(\"selection\", sortType),\n          onClick: () => setSortType(\"selection\"),\n          children: \"Selection Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"merge\", sortType),\n          onClick: () => setSortType(\"merge\"),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"quick\", sortType),\n          onClick: () => setSortType(\"quick\"),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(DotAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"RXFs7xw9pRqNZzborZ2PxWV323U=\");\n\n_c = Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx"],"names":["useState","useRef","useEffect","Bar","DotAnimation","shuffleArray","initialArray","initArray","calculateTimeDelay","changeSize","buttonClass","bubbleswap","Array","isSorting","setIsSorting","sortType","setSortType","canSort","setCanSort","dataArray","setDataArray","orangeValueRef","pinkValueRef","chartData","setChartData","labels","datasets","label","data","backgroundColor","borderColor","arrayRef","current","colors","number","push","bubbleSort","isSorted","i","length","j","Promise","resolve","setTimeout","updatedArray","insertionSort","updateValues","selectionSort","minimumIdx","temp","pinkValue","orangeValue","runMergeSort","newArray","mergeSort","array","half","left","splice","merge","right","shift","sortArray","marginTop","width","height","display","justifyContent","margin","maintainAspectRatio","animation","legend","textTransform","e","parseInt","target","value"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport DotAnimation from \"./DotAnimation\";\nimport {\n    shuffleArray,\n    initialArray as initArray,\n} from \"../helpers/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { changeSize } from \"../helpers/changesize\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport { IChartData } from \"../helpers/interfaces\";\n\nexport default function Array() {\n    const initialArray = shuffleArray(initArray);\n    const [isSorting, setIsSorting] = useState<boolean>(false);\n    const [sortType, setSortType] = useState<string>(\"bubble\");\n    const [canSort, setCanSort] = useState<boolean>(true);\n    const [dataArray, setDataArray] = useState<number[]>(initialArray);\n    const orangeValueRef = useRef<number>(0);\n    const pinkValueRef = useRef<number>(0);\n    const [chartData, setChartData] = useState<IChartData>({\n        labels: initialArray,\n        datasets: [\n            {\n                label: \"value\",\n                data: initialArray,\n                backgroundColor: \"#377E86\",\n                borderColor: \"#313131\",\n            },\n        ],\n    });\n\n    const arrayRef = useRef<number[]>([]);\n    arrayRef.current = dataArray;\n\n    useEffect((): void => {\n        let colors: any = [];\n        if (!isSorting) colors = \"#377E86\";\n        else {\n            for (const number of arrayRef.current) {\n                if (number === orangeValueRef.current) colors.push(\"#FF7700\");\n                else if (number === pinkValueRef.current)\n                    colors.push(\"#ff8686\");\n                else colors.push(\"#377E86\");\n            }\n        }\n\n        setChartData({\n            labels: arrayRef.current,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: arrayRef.current,\n                    backgroundColor: colors,\n                    borderColor: \"#313131\",\n                },\n            ],\n        });\n    }, [dataArray, isSorting]);\n\n    async function bubbleSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        let isSorted: boolean = false;\n        while (!isSorted) {\n            for (let i = 0; i < dataArray.length; i++) {\n                isSorted = true;\n\n                for (let j = 1; j < dataArray.length - i; j++) {\n                    await new Promise((resolve: any) =>\n                        setTimeout(\n                            resolve,\n                            calculateTimeDelay(dataArray.length)\n                        )\n                    );\n                    if (dataArray[j] < dataArray[j - 1]) {\n                        const updatedArray = bubbleswap(dataArray, j, j - 1);\n                        pinkValueRef.current = dataArray[j + 1];\n                        orangeValueRef.current = dataArray[j];\n                        setDataArray([...updatedArray]);\n                        isSorted = false;\n                    } else {\n                        pinkValueRef.current = dataArray[j + 1];\n                        orangeValueRef.current = dataArray[j];\n                        setDataArray([...dataArray]);\n                    }\n                }\n            }\n        }\n        pinkValueRef.current = 0;\n        setIsSorting(false);\n    }\n\n    async function insertionSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        orangeValueRef.current = 0;\n        for (let i = 1; i < dataArray.length; i++) {\n            let current: number = dataArray[i];\n            let j: number = i - 1;\n            while (j >= 0 && dataArray[j] > current) {\n                // await new Promise((resolve: any) =>\n                //     setTimeout(resolve, calculateTimeDelay(dataArray.length))\n                // );\n                dataArray[j + 1] = dataArray[j];\n                j--;\n                dataArray[j + 1] = current;\n                await updateValues(dataArray[j -1], dataArray[j])\n                // pinkValueRef.current = dataArray[j];\n                // orangeValueRef.current = dataArray[j + 1];\n                // setDataArray([...dataArray]);\n            }\n        }\n        setDataArray([...dataArray]);\n        setIsSorting(false);\n    }\n\n    async function selectionSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        pinkValueRef.current = 1;\n        orangeValueRef.current = 0;\n        for (let i = 0; i < dataArray.length; i++) {\n            let minimumIdx = i;\n            for (let j = i + 1; j < dataArray.length; j++) {\n                if (dataArray[j] < dataArray[minimumIdx]) {\n                    minimumIdx = j;\n                }\n                await updateValues(dataArray[j], dataArray[minimumIdx])\n            }\n            if (minimumIdx !== i) {\n                const temp = dataArray[minimumIdx];\n                dataArray[minimumIdx] = dataArray[i];\n                dataArray[i] = temp;\n            }\n        }\n        setDataArray([...dataArray]);\n        setIsSorting(false);\n    }\n\n    async function updateValues(\n        pinkValue: number,\n        orangeValue: number\n    ): Promise<void> {\n        pinkValueRef.current = pinkValue;\n        orangeValueRef.current = orangeValue;\n        setDataArray([...dataArray]);\n        await new Promise((resolve: any) =>\n            setTimeout(resolve, calculateTimeDelay(dataArray.length))\n        );\n    }\n\n    function runMergeSort(): void {\n        const newArray = mergeSort(dataArray);\n        setDataArray([...newArray]);\n    }\n\n    function mergeSort(array: any): any {\n        const half = array.length / 2;\n\n        if (array.length < 2) return array;\n\n        const left = array.splice(0, half);\n        return merge(mergeSort(left), mergeSort(array));\n    }\n\n    function merge(left: any, right: any): any {\n        const newArray: any = [];\n        while (!!left.length && !!right.length) {\n            if (left[0] < right[0]) newArray.push(left.shift());\n            else newArray.push(right.shift());\n        }\n        return [...newArray, ...left, ...right];\n    }\n\n    function sortArray(): void {\n        if (canSort) {\n            switch (sortType) {\n                case \"bubble\":\n                    bubbleSort();\n                    break;\n                case \"insertion\":\n                    insertionSort();\n                    break;\n                case \"merge\":\n                    runMergeSort();\n                    break;\n                case \"quick\":\n                    // quickSort();\n                    break;\n                default:\n                    selectionSort();\n            }\n        }\n    }\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar\n                    data={chartData}\n                    options={{\n                        maintainAspectRatio: false,\n                        animation: false,\n                        legend: {\n                            display: false,\n                        },\n                    }}\n                />\n            </div>\n            {!isSorting ? (\n                <>\n                    <h2 style={{ textTransform: \"capitalize\" }}>\n                        {sortType} Sort\n                    </h2>\n                    <div\n                        style={{\n                            margin: \"15px 0 0\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}>\n                        {canSort ? (\n                            <button\n                                className={\"btn btn-lg btn-info sort-btn\"}\n                                onClick={sortArray}>\n                                Sort It!\n                            </button>\n                        ) : null}\n                        <button\n                            className={\"btn btn-secondary sort-btn\"}\n                            onClick={() => {\n                                setCanSort(true);\n                                const newArray = shuffleArray(dataArray);\n                                setDataArray([...newArray]);\n                            }}>\n                            Shuffle Array\n                        </button>\n                    </div>\n                    <h3>Array Size</h3>\n                    <input\n                        type=\"range\"\n                        min=\"25\"\n                        max=\"125\"\n                        step=\"20\"\n                        value={dataArray.length}\n                        className=\"slider\"\n                        onChange={(e) => {\n                            setCanSort(true);\n                            setDataArray([\n                                ...changeSize(parseInt(e.target.value)),\n                            ]);\n                        }}\n                        style={{ width: \"20vw\" }}\n                    />\n                    <hr />\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                        <button\n                            className={buttonClass(\"bubble\", sortType)}\n                            onClick={() => setSortType(\"bubble\")}>\n                            Bubble Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"insertion\", sortType)}\n                            onClick={() => setSortType(\"insertion\")}>\n                            Insertion Sort\n                        </button>\n                        <button\n                            name=\"selection\"\n                            className={buttonClass(\"selection\", sortType)}\n                            onClick={() => setSortType(\"selection\")}>\n                            Selection Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"merge\", sortType)}\n                            onClick={() => setSortType(\"merge\")}>\n                            Merge Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"quick\", sortType)}\n                            onClick={() => setSortType(\"quick\")}>\n                            Quick Sort\n                        </button>\n                    </div>\n                </>\n            ) : (\n                <DotAnimation />\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
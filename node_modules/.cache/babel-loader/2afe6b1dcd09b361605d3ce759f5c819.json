{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport DotAnimation from \"./DotAnimation\";\nimport { shuffleArray, initialArray as initArray } from \"../Algorithms/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nexport default function Array() {\n  _s();\n\n  const [isSorting, setIsSorting] = useState(false);\n  const [sortType, setSortType] = useState(\"bubble\");\n  const initialArray = shuffleArray(initArray);\n  const [dataArray, setDataArray] = useState(initialArray);\n  const [currentValue, setCurrentValue] = useState(0);\n  const [compareValue, setCompareValue] = useState(0);\n  const [chartData, setChartData] = useState({\n    labels: initialArray,\n    datasets: [{\n      label: \"value\",\n      data: initialArray,\n      scaleLabel: {\n        display: false\n      },\n      backgroundColor: \"#377E86\",\n      borderColor: \"#313131\"\n    }]\n  });\n  const arrayRef = useRef([]);\n  arrayRef.current = dataArray;\n  useEffect(() => {\n    let colors = [];\n    if (!isSorting) colors = \"#377E86\";else {\n      for (const number of arrayRef.current) {\n        if (number === currentValue) colors.push(\"#FF7700\");else if (number === compareValue) colors.push(\"#00FF15\");else colors.push(\"#377E86\");\n      }\n    }\n    setChartData({\n      labels: arrayRef.current,\n      datasets: [{\n        label: \"value\",\n        data: arrayRef.current,\n        scaleLabel: {\n          display: false\n        },\n        backgroundColor: colors,\n        borderColor: \"#313131\"\n      }]\n    });\n  }, [dataArray, isSorting]);\n\n  async function bubbleSort() {\n    setIsSorting(true);\n    let isSorted = false;\n\n    while (!isSorted) {\n      for (let i = 0; i < dataArray.length; i++) {\n        isSorted = true;\n\n        for (let j = 1; j < dataArray.length - i; j++) {\n          if (dataArray[j] < dataArray[j - 1]) {\n            const updatedArray = await bubbleswap(dataArray, j, j - 1, calculateTimeDelay(dataArray.length));\n            setCompareValue(dataArray[j + 1]);\n            setCurrentValue(dataArray[j]);\n            setDataArray([...updatedArray]);\n            isSorted = false;\n          }\n        }\n      }\n    }\n\n    setCurrentValue(0);\n    setIsSorting(false);\n  }\n\n  async function insertionSort() {\n    setIsSorting(true);\n    const newArray = dataArray;\n\n    for (let i = 1; i < newArray.length; i++) {\n      let current = newArray[i];\n      let j = i - 1;\n      setCurrentValue(current);\n      setCompareValue(newArray[i + 1]);\n\n      while (j >= 0 && newArray[j] > current) // eslint-disable-next-line\n      await new Promise(resolve => setTimeout(function () {\n        newArray[j + 1] = newArray[j];\n        j--;\n        newArray[j + 1] = current;\n        resolve();\n      }, calculateTimeDelay(dataArray.length)));\n\n      setDataArray([...newArray]);\n    }\n\n    setIsSorting(false);\n  }\n\n  function sortArray() {\n    switch (sortType) {\n      case \"bubble\":\n        bubbleSort();\n        break;\n\n      case \"insertion\":\n        insertionSort();\n        break;\n\n      case \"merge\":\n        // mergeSort();\n        break;\n\n      case \"quick\":\n        // quickSort();\n        break;\n\n      default: // selectionSort();\n\n    }\n  }\n\n  function changeSize(size) {\n    const newArray = [];\n\n    for (let i = 1; i <= size; i++) {\n      newArray.push(i);\n    }\n\n    setDataArray([...shuffleArray(newArray)]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      children: [sortType, \" Sort\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          maintainAspectRatio: false,\n          animation: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), !isSorting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"15px 0 0\",\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-lg btn-info sort-btn\",\n          onClick: sortArray,\n          children: \"Sort It!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary sort-btn\",\n          onClick: () => setDataArray([...shuffleArray(dataArray)]),\n          children: \"Shuffle Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Array Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"25\",\n        max: \"125\",\n        step: \"20\",\n        value: dataArray.length,\n        className: \"slider\",\n        onChange: e => changeSize(parseInt(e.target.value)),\n        style: {\n          width: \"20vw\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"bubble\", sortType),\n          onClick: () => setSortType(\"bubble\"),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"insertion\", sortType),\n          onClick: () => setSortType(\"insertion\"),\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          name: \"selection\",\n          className: buttonClass(\"selection\", sortType),\n          onClick: () => setSortType(\"selection\"),\n          children: \"Selection Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"merge\", sortType),\n          onClick: () => setSortType(\"merge\"),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"quick\", sortType),\n          onClick: () => setSortType(\"quick\"),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(DotAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"en6Mya5+kUeteiZKZWPMzkeuVyQ=\");\n\n_c = Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx"],"names":["useState","useRef","useEffect","Bar","DotAnimation","shuffleArray","initialArray","initArray","calculateTimeDelay","buttonClass","bubbleswap","Array","isSorting","setIsSorting","sortType","setSortType","dataArray","setDataArray","currentValue","setCurrentValue","compareValue","setCompareValue","chartData","setChartData","labels","datasets","label","data","scaleLabel","display","backgroundColor","borderColor","arrayRef","current","colors","number","push","bubbleSort","isSorted","i","length","j","updatedArray","insertionSort","newArray","Promise","resolve","setTimeout","sortArray","changeSize","size","marginTop","textTransform","width","height","justifyContent","margin","maintainAspectRatio","animation","e","parseInt","target","value"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport DotAnimation from \"./DotAnimation\";\nimport {\n    shuffleArray,\n    initialArray as initArray,\n} from \"../Algorithms/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport { ChartData } from \"../helpers/interfaces\";\n\nexport default function Array() {\n    const [isSorting, setIsSorting] = useState<boolean>(false);\n    const [sortType, setSortType] = useState<string>(\"bubble\");\n    const initialArray = shuffleArray(initArray);\n    const [dataArray, setDataArray] = useState<number[]>(initialArray);\n    const [currentValue, setCurrentValue] = useState<number>(0);\n    const [compareValue, setCompareValue] = useState<number>(0);\n    const [chartData, setChartData] = useState<ChartData>({\n        labels: initialArray,\n        datasets: [\n            {\n                label: \"value\",\n                data: initialArray,\n                scaleLabel: {\n                    display: false,\n                },\n                backgroundColor: \"#377E86\",\n                borderColor: \"#313131\",\n            },\n        ],\n    });\n\n    const arrayRef = useRef<number[]>([]);\n    arrayRef.current = dataArray;\n\n    useEffect(() => {\n        let colors: any = [];\n\n        if (!isSorting) colors = \"#377E86\";\n        else {\n            for (const number of arrayRef.current) {\n                if (number === currentValue) colors.push(\"#FF7700\");\n                else if (number === compareValue) colors.push(\"#00FF15\");\n                else colors.push(\"#377E86\");\n            }\n        }\n\n        setChartData({\n            labels: arrayRef.current,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: arrayRef.current,\n                    scaleLabel: {\n                        display: false,\n                    },\n                    backgroundColor: colors,\n                    borderColor: \"#313131\",\n                },\n            ],\n        });\n    }, [dataArray, isSorting]);\n\n    async function bubbleSort() {\n        setIsSorting(true);\n        let isSorted: boolean = false;\n        while (!isSorted) {\n            for (let i = 0; i < dataArray.length; i++) {\n                isSorted = true;\n\n                for (let j = 1; j < dataArray.length - i; j++) {\n                    if (dataArray[j] < dataArray[j - 1]) {\n                        const updatedArray = await bubbleswap(\n                            dataArray,\n                            j,\n                            j - 1,\n                            calculateTimeDelay(dataArray.length)\n                        );\n                        setCompareValue(dataArray[j + 1]);\n                        setCurrentValue(dataArray[j]);\n                        setDataArray([...updatedArray]);\n                        isSorted = false;\n                    }\n                }\n            }\n        }\n        setCurrentValue(0);\n        setIsSorting(false);\n    }\n\n    async function insertionSort() {\n        setIsSorting(true);\n        const newArray: number[] = dataArray;\n        for (let i = 1; i < newArray.length; i++) {\n            let current: number = newArray[i];\n            let j: number = i - 1;\n            setCurrentValue(current);\n            setCompareValue(newArray[i + 1]);\n\n            while (j >= 0 && newArray[j] > current)\n                // eslint-disable-next-line\n                await new Promise((resolve: any) =>\n                    setTimeout(function () {\n                        newArray[j + 1] = newArray[j];\n                        j--;\n                        newArray[j + 1] = current;\n                        resolve();\n                    }, calculateTimeDelay(dataArray.length))\n                );\n            setDataArray([...newArray]);\n        }\n        setIsSorting(false);\n    }\n\n    function sortArray() {\n        switch (sortType) {\n            case \"bubble\":\n                bubbleSort();\n                break;\n            case \"insertion\":\n                insertionSort();\n                break;\n            case \"merge\":\n                // mergeSort();\n                break;\n            case \"quick\":\n                // quickSort();\n                break;\n            default:\n            // selectionSort();\n        }\n    }\n\n    function changeSize(size: number) {\n        const newArray: number[] = [];\n        for (let i = 1; i <= size; i++) {\n            newArray.push(i);\n        }\n        setDataArray([...shuffleArray(newArray)]);\n    }\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <h2 style={{ textTransform: \"capitalize\" }}>{sortType} Sort</h2>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar\n                    data={chartData}\n                    options={{\n                        maintainAspectRatio: false,\n                        animation: false,\n                    }}\n                />\n            </div>\n            {!isSorting ? (\n                <>\n                    <div\n                        style={{\n                            margin: \"15px 0 0\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}>\n                        <button\n                            className={\"btn btn-lg btn-info sort-btn\"}\n                            onClick={sortArray}>\n                            Sort It!\n                        </button>\n                        <button\n                            className={\"btn btn-secondary sort-btn\"}\n                            onClick={() =>\n                                setDataArray([...shuffleArray(dataArray)])\n                            }>\n                            Shuffle Array\n                        </button>\n                    </div>\n                    <h3>Array Size</h3>\n                    <input\n                        type=\"range\"\n                        min=\"25\"\n                        max=\"125\"\n                        step=\"20\"\n                        value={dataArray.length}\n                        className=\"slider\"\n                        onChange={(e) => changeSize(parseInt(e.target.value))}\n                        style={{ width: \"20vw\" }}\n                    />\n                    <hr />\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                        <button\n                            className={buttonClass(\"bubble\", sortType)}\n                            onClick={() => setSortType(\"bubble\")}>\n                            Bubble Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"insertion\", sortType)}\n                            onClick={() => setSortType(\"insertion\")}>\n                            Insertion Sort\n                        </button>\n                        <button\n                            name=\"selection\"\n                            className={buttonClass(\"selection\", sortType)}\n                            onClick={() => setSortType(\"selection\")}>\n                            Selection Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"merge\", sortType)}\n                            onClick={() => setSortType(\"merge\")}>\n                            Merge Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"quick\", sortType)}\n                            onClick={() => setSortType(\"quick\")}>\n                            Quick Sort\n                        </button>\n                    </div>\n                </>\n            ) : (\n                <DotAnimation />\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { shuffleArray, initialArray as initArray } from \"../Algorithms/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nexport default function Array() {\n  _s();\n\n  const [isSorting, setIsSorting] = useState(false);\n  const [sortType, setSortType] = useState(\"simple\");\n  const initialArray = initArray;\n  const [dataArray, setDataArray] = useState(shuffleArray(initialArray));\n  const [chartData, setChartData] = useState({\n    labels: dataArray,\n    datasets: [{\n      label: \"value\",\n      data: dataArray,\n      backgroundColor: \"#377E86\"\n    }]\n  });\n  const arrayRef = useRef([]);\n  arrayRef.current = dataArray;\n  useEffect(() => {\n    setChartData({\n      labels: arrayRef.current,\n      datasets: [{\n        label: \"value\",\n        data: arrayRef.current,\n        backgroundColor: \"#377E86\"\n      }]\n    });\n  }, [dataArray]);\n\n  async function bubbleSort() {\n    setIsSorting(true);\n    let isSorted = false;\n\n    while (!isSorted) {\n      for (let i = 0; i < dataArray.length; i++) {\n        isSorted = true;\n\n        for (let j = 1; j < dataArray.length - i; j++) {\n          if (dataArray[j] < dataArray[j - 1]) {\n            const updatedArray = await swap(dataArray, j, j - 1);\n            setDataArray([...updatedArray]);\n            isSorted = false;\n          }\n        }\n      }\n    }\n\n    setIsSorting(false);\n  }\n\n  async function swap(array, index1, index2) {\n    await new Promise(resolve => setTimeout(async function () {\n      const temp = array[index1];\n      array[index1] = array[index2];\n      array[index2] = temp;\n      resolve();\n    }, calculateTimeDelay(dataArray.length)));\n    return array;\n  }\n\n  function changeSize(size) {\n    const newArray = [];\n\n    for (let i = 1; i <= size; i++) {\n      newArray.push(i);\n    }\n\n    setDataArray([...shuffleArray(newArray)]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      children: [sortType, \" Sort\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          maintainAspectRatio: false,\n          animation: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), !isSorting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"15px 0 10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-lg btn-primary\",\n          onClick: () => bubbleSort(),\n          children: \"Sort It!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Array Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"25\",\n        max: \"125\",\n        step: \"20\",\n        value: dataArray.length,\n        className: \"slider\",\n        onChange: e => changeSize(parseInt(e.target.value)),\n        style: {\n          width: \"20vw\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"simple\", sortType),\n          onClick: () => setSortType(\"simple\"),\n          children: \"Simple Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"bubble\", sortType),\n          onClick: () => setSortType(\"bubble\"),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          name: \"selection\",\n          className: buttonClass(\"selection\", sortType),\n          onClick: () => setSortType(\"selection\"),\n          children: \"Selection Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"merge\", sortType),\n          onClick: () => setSortType(\"merge\"),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"quick\", sortType),\n          onClick: () => setSortType(\"quick\"),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"HI3d+yz1JIbekHIqx4jPQtgnIFw=\");\n\n_c = Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx"],"names":["useState","useRef","useEffect","Bar","shuffleArray","initialArray","initArray","calculateTimeDelay","buttonClass","Array","isSorting","setIsSorting","sortType","setSortType","dataArray","setDataArray","chartData","setChartData","labels","datasets","label","data","backgroundColor","arrayRef","current","bubbleSort","isSorted","i","length","j","updatedArray","swap","array","index1","index2","Promise","resolve","setTimeout","temp","changeSize","size","newArray","push","marginTop","textTransform","width","height","display","justifyContent","margin","maintainAspectRatio","animation","e","parseInt","target","value"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n    shuffleArray,\n    initialArray as initArray,\n} from \"../Algorithms/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { buttonClass } from \"../helpers/buttonClass\";\n\nexport default function Array() {\n    const [isSorting, setIsSorting] = useState<boolean>(false);\n    const [sortType, setSortType] = useState<string>(\"simple\");\n    const initialArray = initArray;\n    const [dataArray, setDataArray] = useState<number[]>(\n        shuffleArray(initialArray)\n    );\n\n    const [chartData, setChartData] = useState<object>({\n        labels: dataArray,\n        datasets: [\n            {\n                label: \"value\",\n                data: dataArray,\n                backgroundColor: \"#377E86\",\n            },\n        ],\n    });\n\n    const arrayRef = useRef<number[]>([]);\n    arrayRef.current = dataArray;\n\n    useEffect(() => {\n        setChartData({\n            labels: arrayRef.current,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: arrayRef.current,\n                    backgroundColor: \"#377E86\",\n                },\n            ],\n        });\n    }, [dataArray]);\n\n    async function bubbleSort() {\n        setIsSorting(true);\n        let isSorted: boolean = false;\n        while (!isSorted) {\n            for (let i = 0; i < dataArray.length; i++) {\n                isSorted = true;\n\n                for (let j = 1; j < dataArray.length - i; j++) {\n                    if (dataArray[j] < dataArray[j - 1]) {\n                        const updatedArray = await swap(dataArray, j, j - 1);\n                        setDataArray([...updatedArray]);\n                        isSorted = false;\n                    }\n                }\n            }\n        }\n        setIsSorting(false);\n    }\n\n    async function swap(array: number[], index1: number, index2: number) {\n        await new Promise((resolve: any) =>\n            setTimeout(async function () {\n                const temp: number = array[index1];\n                array[index1] = array[index2];\n                array[index2] = temp;\n                resolve();\n            }, calculateTimeDelay(dataArray.length))\n        );\n        return array;\n    }\n\n    function changeSize(size: number) {\n        const newArray: number[] = [];\n        for (let i = 1; i <= size; i++) {\n            newArray.push(i);\n        }\n        setDataArray([...shuffleArray(newArray)]);\n    }\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <h2 style={{ textTransform: \"capitalize\" }}>{sortType} Sort</h2>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar\n                    data={chartData}\n                    options={{\n                        maintainAspectRatio: false,\n                        animation: false,\n                    }}\n                />\n            </div>\n            {!isSorting ? (\n                <>\n                    <div style={{ margin: \"15px 0 10px\" }}>\n                        <button\n                            className={\"btn btn-lg btn-primary\"}\n                            onClick={() => bubbleSort()}>\n                            Sort It!\n                        </button>\n                    </div>\n                    <h2>Array Size</h2>\n                    <input\n                        type=\"range\"\n                        min=\"25\"\n                        max=\"125\"\n                        step=\"20\"\n                        value={dataArray.length}\n                        className=\"slider\"\n                        onChange={(e) => changeSize(parseInt(e.target.value))}\n                        style={{ width: \"20vw\" }}\n                    />\n                    <br />\n                    <br />\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                        <button\n                            className={buttonClass(\"simple\", sortType)}\n                            onClick={() => setSortType(\"simple\")}>\n                            Simple Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"bubble\", sortType)}\n                            onClick={() => setSortType(\"bubble\")}>\n                            Bubble Sort\n                        </button>\n                        <button\n                            name=\"selection\"\n                            className={buttonClass(\"selection\", sortType)}\n                            onClick={() => setSortType(\"selection\")}>\n                            Selection Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"merge\", sortType)}\n                            onClick={() => setSortType(\"merge\")}>\n                            Merge Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"quick\", sortType)}\n                            onClick={() => setSortType(\"quick\")}>\n                            Quick Sort\n                        </button>\n                    </div>\n                </>\n            ) : null}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
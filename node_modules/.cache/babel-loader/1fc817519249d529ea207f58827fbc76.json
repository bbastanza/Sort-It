{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Visualizer.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport DotAnimation from \"./DotAnimation\";\nimport { shuffleArray, initialArray as initArray } from \"../helpers/shuffleArray\";\nimport { changeSize } from \"../helpers/changesize\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nexport default function Visualizer() {\n  _s();\n\n  const initialArray = shuffleArray(initArray);\n  const [isSorting, setIsSorting] = useState(false);\n  const [sortType, setSortType] = useState(\"bubble\");\n  const [canSort, setCanSort] = useState(true);\n  const [dataArray, setDataArray] = useState(initialArray);\n  const orangeValueRef = useRef(5);\n  const pinkValueRef = useRef(10);\n  const arrayRef = useRef(dataArray);\n  arrayRef.current = dataArray;\n  const [chartData, setChartData] = useState({\n    labels: initialArray,\n    datasets: [{\n      label: \"value\",\n      data: initialArray,\n      backgroundColor: \"#377E86\",\n      borderColor: \"#313131\"\n    }]\n  }); // TODO should be in a ref so it only gets updated when the array size changes\n  // const timeDelay: number = calculateTimeDelay(dataArray.length, sortType);\n\n  useEffect(() => {\n    let colors = [];\n\n    if (isSorting) {\n      for (const number of arrayRef.current) {\n        if (number === orangeValueRef.current) colors.push(\"#FF7700\");else if (number === pinkValueRef.current) colors.push(\"#ff8686\");else colors.push(\"#377E86\");\n      }\n    } else colors = \"#377E86\";\n\n    setChartData({\n      labels: arrayRef.current,\n      datasets: [{\n        label: \"value\",\n        data: arrayRef.current,\n        backgroundColor: colors,\n        borderColor: \"#313131\"\n      }]\n    });\n  }, [dataArray, isSorting]);\n\n  async function updateAndPause(pinkValue, orangeValue) {\n    await new Promise(resolve => setTimeout(resolve, 2)); // const tempArray: number[] = [];\n    // for (const number of dataArray) {\n    //     if (!!number) tempArray.push(number);\n    // }\n\n    pinkValueRef.current = pinkValue;\n    orangeValueRef.current = orangeValue;\n    setDataArray([...dataArray]);\n  }\n\n  async function bubbleSort() {\n    setCanSort(false);\n    setIsSorting(true);\n    let isSorted = false;\n\n    while (!isSorted) {\n      for (let i = 0; i < dataArray.length; i++) {\n        isSorted = true;\n\n        for (let j = 1; j < dataArray.length - i; j++) {\n          await updateAndPause(dataArray[j], dataArray[j - 1]);\n\n          if (dataArray[j] < dataArray[j - 1]) {\n            bubbleswap(dataArray, j, j - 1);\n            isSorted = false;\n          }\n        }\n      }\n    }\n\n    setIsSorting(false);\n  }\n\n  async function insertionSort() {\n    setCanSort(false);\n    setIsSorting(true);\n    orangeValueRef.current = 0;\n\n    for (let i = 1; i < dataArray.length; i++) {\n      let current = dataArray[i];\n      let j = i - 1;\n\n      while (j >= 0 && dataArray[j] > current) {\n        dataArray[j + 1] = dataArray[j];\n        j--;\n        dataArray[j + 1] = current;\n        await updateAndPause(dataArray[j], dataArray[j + 1]);\n      }\n    }\n\n    setDataArray([...dataArray]);\n    setIsSorting(false);\n  }\n\n  async function selectionSort() {\n    setCanSort(false);\n    setIsSorting(true);\n\n    for (let i = 0; i < dataArray.length; i++) {\n      let minimumIdx = i;\n\n      for (let j = i + 1; j < dataArray.length; j++) {\n        if (dataArray[j] < dataArray[minimumIdx]) {\n          minimumIdx = j;\n        }\n\n        await updateAndPause(dataArray[j], dataArray[minimumIdx]);\n      }\n\n      if (minimumIdx !== i) {\n        const temp = dataArray[minimumIdx];\n        dataArray[minimumIdx] = dataArray[i];\n        dataArray[i] = temp;\n      }\n    }\n\n    setDataArray([...dataArray]);\n    setIsSorting(false);\n  }\n\n  async function mergeSort() {\n    setCanSort(false);\n    setIsSorting(true);\n    const length = dataArray.length;\n\n    for (let currentSize = 1; currentSize <= length - 1; currentSize = currentSize * 2) {\n      for (let leftStart = 0; leftStart < length - 1; leftStart += currentSize * 2) {\n        const middle = leftStart + currentSize - 1;\n        const rightEnd = Math.min(leftStart + currentSize * 2 - 1, length - 1);\n        await merge(dataArray, leftStart, middle, rightEnd);\n      }\n    }\n\n    setIsSorting(false);\n  }\n\n  async function merge(array, left, middle, right) {\n    const firstNumber = middle - left + 1;\n    const secondNumber = right - middle;\n    let i;\n    let j;\n    const leftTempArray = [firstNumber];\n    const rightTempArray = [secondNumber];\n\n    for (i = 0; i < firstNumber; i++) {\n      leftTempArray[i] = array[left + i];\n    }\n\n    for (j = 0; j < secondNumber; j++) {\n      rightTempArray[j] = array[middle + 1 + j];\n    }\n\n    i = 0;\n    j = 0;\n\n    while (i < firstNumber && j < secondNumber) {\n      if (leftTempArray[i] <= rightTempArray[j]) {\n        array[left] = leftTempArray[i];\n        i++;\n        await updateAndPause(array[left - 1], 0);\n      } else {\n        array[left] = rightTempArray[j];\n        j++;\n        await updateAndPause(array[left - 1], 0);\n      }\n\n      left++;\n    }\n\n    while (i < firstNumber) {\n      if (!!leftTempArray[i]) {\n        array[left] = leftTempArray[i];\n      }\n\n      i++;\n      left++;\n      await updateAndPause(array[left - 1], 0);\n    }\n\n    await updateAndPause(0, 0);\n\n    while (j < secondNumber) {\n      if (!!leftTempArray[i]) {\n        array[left] = rightTempArray[j];\n      }\n\n      j++;\n      left++;\n      await updateAndPause(array[left - 1], 0);\n    }\n  }\n\n  function sortArray() {\n    if (canSort) {\n      switch (sortType) {\n        case \"bubble\":\n          bubbleSort();\n          break;\n\n        case \"insertion\":\n          insertionSort();\n          break;\n\n        case \"merge\":\n          mergeSort();\n          break;\n\n        case \"quick\":\n          // quickSort();\n          break;\n\n        default:\n          selectionSort();\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        redraw: true,\n        data: chartData,\n        options: {\n          maintainAspectRatio: false,\n          animation: false,\n          legend: {\n            display: false\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), !isSorting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textTransform: \"capitalize\"\n        },\n        children: [sortType, \" Sort\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"15px 0 0\",\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: [canSort ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-lg btn-info sort-btn\",\n          onClick: sortArray,\n          children: \"Sort It!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 29\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary sort-btn\",\n          onClick: () => {\n            setCanSort(true);\n            setDataArray([...shuffleArray(dataArray)]);\n          },\n          children: \"Shuffle Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Array Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"25\",\n        max: \"125\",\n        step: \"20\"\n        /* value = {value} */\n        ,\n        value: dataArray.length,\n        className: \"slider\",\n        onChange: e => {\n          setCanSort(true);\n          setDataArray([...changeSize(parseInt(e.target.value))]);\n        },\n        style: {\n          width: \"20vw\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"bubble\", sortType),\n          onClick: () => setSortType(\"bubble\"),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"insertion\", sortType),\n          onClick: () => setSortType(\"insertion\"),\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          name: \"selection\",\n          className: buttonClass(\"selection\", sortType),\n          onClick: () => setSortType(\"selection\"),\n          children: \"Selection Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"merge\", sortType),\n          onClick: () => setSortType(\"merge\"),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: buttonClass(\"quick\", sortType),\n          onClick: () => setSortType(\"quick\"),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(DotAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Visualizer, \"qBuPR/qUnvwuAURWXWh7l0R6VC8=\");\n\n_c = Visualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Visualizer.tsx"],"names":["useState","useRef","useEffect","Bar","DotAnimation","shuffleArray","initialArray","initArray","changeSize","buttonClass","bubbleswap","Visualizer","isSorting","setIsSorting","sortType","setSortType","canSort","setCanSort","dataArray","setDataArray","orangeValueRef","pinkValueRef","arrayRef","current","chartData","setChartData","labels","datasets","label","data","backgroundColor","borderColor","colors","number","push","updateAndPause","pinkValue","orangeValue","Promise","resolve","setTimeout","bubbleSort","isSorted","i","length","j","insertionSort","selectionSort","minimumIdx","temp","mergeSort","currentSize","leftStart","middle","rightEnd","Math","min","merge","array","left","right","firstNumber","secondNumber","leftTempArray","rightTempArray","sortArray","marginTop","width","height","display","justifyContent","margin","maintainAspectRatio","animation","legend","textTransform","e","parseInt","target","value"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SACIC,YADJ,EAEIC,YAAY,IAAIC,SAFpB,QAGO,yBAHP;AAKA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAGA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACjC,QAAML,YAAY,GAAGD,YAAY,CAACE,SAAD,CAAjC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAS,QAAT,CAAxC;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAU,IAAV,CAAtC;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAWM,YAAX,CAA1C;AACA,QAAMc,cAAc,GAAGnB,MAAM,CAAS,CAAT,CAA7B;AACA,QAAMoB,YAAY,GAAGpB,MAAM,CAAS,EAAT,CAA3B;AACA,QAAMqB,QAAQ,GAAGrB,MAAM,CAAWiB,SAAX,CAAvB;AACAI,EAAAA,QAAQ,CAACC,OAAT,GAAmBL,SAAnB;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,CAAa;AACnD0B,IAAAA,MAAM,EAAEpB,YAD2C;AAEnDqB,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,KAAK,EAAE,OADX;AAEIC,MAAAA,IAAI,EAAEvB,YAFV;AAGIwB,MAAAA,eAAe,EAAE,SAHrB;AAIIC,MAAAA,WAAW,EAAE;AAJjB,KADM;AAFyC,GAAb,CAA1C,CAViC,CAqBjC;AACA;;AAEA7B,EAAAA,SAAS,CAAC,MAAY;AAClB,QAAI8B,MAAW,GAAG,EAAlB;;AACA,QAAIpB,SAAJ,EAAe;AACX,WAAK,MAAMqB,MAAX,IAAqBX,QAAQ,CAACC,OAA9B,EAAuC;AACnC,YAAIU,MAAM,KAAKb,cAAc,CAACG,OAA9B,EAAuCS,MAAM,CAACE,IAAP,CAAY,SAAZ,EAAvC,KACK,IAAID,MAAM,KAAKZ,YAAY,CAACE,OAA5B,EACDS,MAAM,CAACE,IAAP,CAAY,SAAZ,EADC,KAEAF,MAAM,CAACE,IAAP,CAAY,SAAZ;AACR;AACJ,KAPD,MAOOF,MAAM,GAAG,SAAT;;AAEPP,IAAAA,YAAY,CAAC;AACTC,MAAAA,MAAM,EAAEJ,QAAQ,CAACC,OADR;AAETI,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,KAAK,EAAE,OADX;AAEIC,QAAAA,IAAI,EAAEP,QAAQ,CAACC,OAFnB;AAGIO,QAAAA,eAAe,EAAEE,MAHrB;AAIID,QAAAA,WAAW,EAAE;AAJjB,OADM;AAFD,KAAD,CAAZ;AAWH,GAtBQ,EAsBN,CAACb,SAAD,EAAYN,SAAZ,CAtBM,CAAT;;AAwBA,iBAAeuB,cAAf,CACIC,SADJ,EAEIC,WAFJ,EAGiB;AACb,UAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAkBC,UAAU,CAACD,OAAD,EAAU,CAAV,CAAxC,CAAN,CADa,CAEb;AACA;AACA;AACA;;AACAlB,IAAAA,YAAY,CAACE,OAAb,GAAuBa,SAAvB;AACAhB,IAAAA,cAAc,CAACG,OAAf,GAAyBc,WAAzB;AACAlB,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACH;;AAED,iBAAeuB,UAAf,GAA2C;AACvCxB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAI6B,QAAiB,GAAG,KAAxB;;AACA,WAAO,CAACA,QAAR,EAAkB;AACd,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,SAAS,CAAC0B,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvCD,QAAAA,QAAQ,GAAG,IAAX;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,SAAS,CAAC0B,MAAV,GAAmBD,CAAvC,EAA0CE,CAAC,EAA3C,EAA+C;AAC3C,gBAAMV,cAAc,CAACjB,SAAS,CAAC2B,CAAD,CAAV,EAAe3B,SAAS,CAAC2B,CAAC,GAAG,CAAL,CAAxB,CAApB;;AACA,cAAI3B,SAAS,CAAC2B,CAAD,CAAT,GAAe3B,SAAS,CAAC2B,CAAC,GAAG,CAAL,CAA5B,EAAqC;AACjCnC,YAAAA,UAAU,CAACQ,SAAD,EAAY2B,CAAZ,EAAeA,CAAC,GAAG,CAAnB,CAAV;AACAH,YAAAA,QAAQ,GAAG,KAAX;AACH;AACJ;AACJ;AACJ;;AACD7B,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AAED,iBAAeiC,aAAf,GAA8C;AAC1C7B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAO,IAAAA,cAAc,CAACG,OAAf,GAAyB,CAAzB;;AACA,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,SAAS,CAAC0B,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAIpB,OAAe,GAAGL,SAAS,CAACyB,CAAD,CAA/B;AACA,UAAIE,CAAS,GAAGF,CAAC,GAAG,CAApB;;AACA,aAAOE,CAAC,IAAI,CAAL,IAAU3B,SAAS,CAAC2B,CAAD,CAAT,GAAetB,OAAhC,EAAyC;AACrCL,QAAAA,SAAS,CAAC2B,CAAC,GAAG,CAAL,CAAT,GAAmB3B,SAAS,CAAC2B,CAAD,CAA5B;AACAA,QAAAA,CAAC;AACD3B,QAAAA,SAAS,CAAC2B,CAAC,GAAG,CAAL,CAAT,GAAmBtB,OAAnB;AACA,cAAMY,cAAc,CAACjB,SAAS,CAAC2B,CAAD,CAAV,EAAe3B,SAAS,CAAC2B,CAAC,GAAG,CAAL,CAAxB,CAApB;AACH;AACJ;;AACD1B,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AAED,iBAAekC,aAAf,GAA8C;AAC1C9B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,SAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,SAAS,CAAC0B,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAIK,UAAU,GAAGL,CAAjB;;AACA,WAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAG3B,SAAS,CAAC0B,MAAlC,EAA0CC,CAAC,EAA3C,EAA+C;AAC3C,YAAI3B,SAAS,CAAC2B,CAAD,CAAT,GAAe3B,SAAS,CAAC8B,UAAD,CAA5B,EAA0C;AACtCA,UAAAA,UAAU,GAAGH,CAAb;AACH;;AACD,cAAMV,cAAc,CAACjB,SAAS,CAAC2B,CAAD,CAAV,EAAe3B,SAAS,CAAC8B,UAAD,CAAxB,CAApB;AACH;;AACD,UAAIA,UAAU,KAAKL,CAAnB,EAAsB;AAClB,cAAMM,IAAI,GAAG/B,SAAS,CAAC8B,UAAD,CAAtB;AACA9B,QAAAA,SAAS,CAAC8B,UAAD,CAAT,GAAwB9B,SAAS,CAACyB,CAAD,CAAjC;AACAzB,QAAAA,SAAS,CAACyB,CAAD,CAAT,GAAeM,IAAf;AACH;AACJ;;AACD9B,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AAED,iBAAeqC,SAAf,GAA0C;AACtCjC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAM+B,MAAc,GAAG1B,SAAS,CAAC0B,MAAjC;;AACA,SACI,IAAIO,WAAmB,GAAG,CAD9B,EAEIA,WAAW,IAAIP,MAAM,GAAG,CAF5B,EAGIO,WAAW,GAAGA,WAAW,GAAG,CAHhC,EAIE;AACE,WACI,IAAIC,SAAS,GAAG,CADpB,EAEIA,SAAS,GAAGR,MAAM,GAAG,CAFzB,EAGIQ,SAAS,IAAID,WAAW,GAAG,CAH/B,EAIE;AACE,cAAME,MAAM,GAAGD,SAAS,GAAGD,WAAZ,GAA0B,CAAzC;AACA,cAAMG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CACbJ,SAAS,GAAGD,WAAW,GAAG,CAA1B,GAA8B,CADjB,EAEbP,MAAM,GAAG,CAFI,CAAjB;AAIA,cAAMa,KAAK,CAACvC,SAAD,EAAYkC,SAAZ,EAAuBC,MAAvB,EAA+BC,QAA/B,CAAX;AACH;AACJ;;AACDzC,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AAED,iBAAe4C,KAAf,CACIC,KADJ,EAEIC,IAFJ,EAGIN,MAHJ,EAIIO,KAJJ,EAKiB;AACb,UAAMC,WAAmB,GAAGR,MAAM,GAAGM,IAAT,GAAgB,CAA5C;AACA,UAAMG,YAAoB,GAAGF,KAAK,GAAGP,MAArC;AACA,QAAIV,CAAJ;AACA,QAAIE,CAAJ;AAEA,UAAMkB,aAAuB,GAAG,CAACF,WAAD,CAAhC;AACA,UAAMG,cAAwB,GAAG,CAACF,YAAD,CAAjC;;AAEA,SAAKnB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkB,WAAhB,EAA6BlB,CAAC,EAA9B,EAAkC;AAC9BoB,MAAAA,aAAa,CAACpB,CAAD,CAAb,GAAmBe,KAAK,CAACC,IAAI,GAAGhB,CAAR,CAAxB;AACH;;AACD,SAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGiB,YAAhB,EAA8BjB,CAAC,EAA/B,EAAmC;AAC/BmB,MAAAA,cAAc,CAACnB,CAAD,CAAd,GAAoBa,KAAK,CAACL,MAAM,GAAG,CAAT,GAAaR,CAAd,CAAzB;AACH;;AAEDF,IAAAA,CAAC,GAAG,CAAJ;AACAE,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAOF,CAAC,GAAGkB,WAAJ,IAAmBhB,CAAC,GAAGiB,YAA9B,EAA4C;AACxC,UAAIC,aAAa,CAACpB,CAAD,CAAb,IAAoBqB,cAAc,CAACnB,CAAD,CAAtC,EAA2C;AACvCa,QAAAA,KAAK,CAACC,IAAD,CAAL,GAAcI,aAAa,CAACpB,CAAD,CAA3B;AACAA,QAAAA,CAAC;AACD,cAAMR,cAAc,CAACuB,KAAK,CAACC,IAAI,GAAG,CAAR,CAAN,EAAkB,CAAlB,CAApB;AACH,OAJD,MAIO;AACHD,QAAAA,KAAK,CAACC,IAAD,CAAL,GAAcK,cAAc,CAACnB,CAAD,CAA5B;AACAA,QAAAA,CAAC;AACD,cAAMV,cAAc,CAACuB,KAAK,CAACC,IAAI,GAAG,CAAR,CAAN,EAAkB,CAAlB,CAApB;AACH;;AACDA,MAAAA,IAAI;AACP;;AACD,WAAOhB,CAAC,GAAGkB,WAAX,EAAwB;AACpB,UAAI,CAAC,CAACE,aAAa,CAACpB,CAAD,CAAnB,EAAwB;AACpBe,QAAAA,KAAK,CAACC,IAAD,CAAL,GAAcI,aAAa,CAACpB,CAAD,CAA3B;AACH;;AAEDA,MAAAA,CAAC;AACDgB,MAAAA,IAAI;AACJ,YAAMxB,cAAc,CAACuB,KAAK,CAACC,IAAI,GAAG,CAAR,CAAN,EAAkB,CAAlB,CAApB;AACH;;AACD,UAAMxB,cAAc,CAAC,CAAD,EAAI,CAAJ,CAApB;;AACA,WAAOU,CAAC,GAAGiB,YAAX,EAAyB;AACrB,UAAI,CAAC,CAACC,aAAa,CAACpB,CAAD,CAAnB,EAAwB;AACpBe,QAAAA,KAAK,CAACC,IAAD,CAAL,GAAcK,cAAc,CAACnB,CAAD,CAA5B;AACH;;AACDA,MAAAA,CAAC;AACDc,MAAAA,IAAI;AACJ,YAAMxB,cAAc,CAACuB,KAAK,CAACC,IAAI,GAAG,CAAR,CAAN,EAAkB,CAAlB,CAApB;AACH;AACJ;;AAED,WAASM,SAAT,GAA2B;AACvB,QAAIjD,OAAJ,EAAa;AACT,cAAQF,QAAR;AACI,aAAK,QAAL;AACI2B,UAAAA,UAAU;AACV;;AACJ,aAAK,WAAL;AACIK,UAAAA,aAAa;AACb;;AACJ,aAAK,OAAL;AACII,UAAAA,SAAS;AACT;;AACJ,aAAK,OAAL;AACI;AACA;;AACJ;AACIH,UAAAA,aAAa;AAdrB;AAgBH;AACJ;;AAED,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEmB,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA,4BACI;AACI,MAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,MADJ;AAEHC,QAAAA,MAAM,EAAE,MAFL;AAGHC,QAAAA,OAAO,EAAE,MAHN;AAIHC,QAAAA,cAAc,EAAE,QAJb;AAKHC,QAAAA,MAAM,EAAE;AALL,OADX;AAAA,6BAQI,QAAC,GAAD;AACI,QAAA,MAAM,EAAE,IADZ;AAEI,QAAA,IAAI,EAAE/C,SAFV;AAGI,QAAA,OAAO,EAAE;AACLgD,UAAAA,mBAAmB,EAAE,KADhB;AAELC,UAAAA,SAAS,EAAE,KAFN;AAGLC,UAAAA,MAAM,EAAE;AACJL,YAAAA,OAAO,EAAE;AADL;AAHH;AAHb;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAsBK,CAACzD,SAAD,gBACG;AAAA,8BACI;AAAI,QAAA,KAAK,EAAE;AAAE+D,UAAAA,aAAa,EAAE;AAAjB,SAAX;AAAA,mBACK7D,QADL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AACI,QAAA,KAAK,EAAE;AACHyD,UAAAA,MAAM,EAAE,UADL;AAEHF,UAAAA,OAAO,EAAE,MAFN;AAGHC,UAAAA,cAAc,EAAE;AAHb,SADX;AAAA,mBAMKtD,OAAO,gBACJ;AACI,UAAA,SAAS,EAAE,8BADf;AAEI,UAAA,OAAO,EAAEiD,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADI,GAMJ,IAZR,eAaI;AACI,UAAA,SAAS,EAAE,4BADf;AAEI,UAAA,OAAO,EAAE,MAAM;AACXhD,YAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,YAAAA,YAAY,CAAC,CAAC,GAAGd,YAAY,CAACa,SAAD,CAAhB,CAAD,CAAZ;AACH,WALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eA4BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ,eA6BI;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,GAAG,EAAC,IAFR;AAGI,QAAA,GAAG,EAAC,KAHR;AAII,QAAA,IAAI,EAAC;AACL;AALJ;AAMI,QAAA,KAAK,EAAEA,SAAS,CAAC0B,MANrB;AAOI,QAAA,SAAS,EAAC,QAPd;AAQI,QAAA,QAAQ,EAAGgC,CAAD,IAAO;AACb3D,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,UAAAA,YAAY,CAAC,CACT,GAAGX,UAAU,CAACqE,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAT,CADJ,CAAD,CAAZ;AAGH,SAbL;AAcI,QAAA,KAAK,EAAE;AAAEZ,UAAAA,KAAK,EAAE;AAAT;AAdX;AAAA;AAAA;AAAA;AAAA,cA7BJ,eA6CI;AAAA;AAAA;AAAA;AAAA,cA7CJ,eA+CI;AAAK,QAAA,KAAK,EAAE;AAAEE,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,cAAc,EAAE;AAAnC,SAAZ;AAAA,gCACI;AACI,UAAA,SAAS,EAAE7D,WAAW,CAAC,QAAD,EAAWK,QAAX,CAD1B;AAEI,UAAA,OAAO,EAAE,MAAMC,WAAW,CAAC,QAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AACI,UAAA,SAAS,EAAEN,WAAW,CAAC,WAAD,EAAcK,QAAd,CAD1B;AAEI,UAAA,OAAO,EAAE,MAAMC,WAAW,CAAC,WAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAWI;AACI,UAAA,IAAI,EAAC,WADT;AAEI,UAAA,SAAS,EAAEN,WAAW,CAAC,WAAD,EAAcK,QAAd,CAF1B;AAGI,UAAA,OAAO,EAAE,MAAMC,WAAW,CAAC,WAAD,CAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAiBI;AACI,UAAA,SAAS,EAAEN,WAAW,CAAC,OAAD,EAAUK,QAAV,CAD1B;AAEI,UAAA,OAAO,EAAE,MAAMC,WAAW,CAAC,OAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBJ,eAsBI;AACI,UAAA,SAAS,EAAEN,WAAW,CAAC,OAAD,EAAUK,QAAV,CAD1B;AAEI,UAAA,OAAO,EAAE,MAAMC,WAAW,CAAC,OAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA/CJ;AAAA,oBADH,gBA8EG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YApGR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyGH;;GAtUuBJ,U;;KAAAA,U","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport DotAnimation from \"./DotAnimation\";\nimport {\n    shuffleArray,\n    initialArray as initArray,\n} from \"../helpers/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { changeSize } from \"../helpers/changesize\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport { IChartData } from \"../helpers/interfaces\";\n\nexport default function Visualizer() {\n    const initialArray = shuffleArray(initArray);\n    const [isSorting, setIsSorting] = useState<boolean>(false);\n    const [sortType, setSortType] = useState<string>(\"bubble\");\n    const [canSort, setCanSort] = useState<boolean>(true);\n    const [dataArray, setDataArray] = useState<number[]>(initialArray);\n    const orangeValueRef = useRef<number>(5);\n    const pinkValueRef = useRef<number>(10);\n    const arrayRef = useRef<number[]>(dataArray);\n    arrayRef.current = dataArray;\n    const [chartData, setChartData] = useState<IChartData>({\n        labels: initialArray,\n        datasets: [\n            {\n                label: \"value\",\n                data: initialArray,\n                backgroundColor: \"#377E86\",\n                borderColor: \"#313131\",\n            },\n        ],\n    });\n    // TODO should be in a ref so it only gets updated when the array size changes\n    // const timeDelay: number = calculateTimeDelay(dataArray.length, sortType);\n\n    useEffect((): void => {\n        let colors: any = [];\n        if (isSorting) {\n            for (const number of arrayRef.current) {\n                if (number === orangeValueRef.current) colors.push(\"#FF7700\");\n                else if (number === pinkValueRef.current)\n                    colors.push(\"#ff8686\");\n                else colors.push(\"#377E86\");\n            }\n        } else colors = \"#377E86\";\n\n        setChartData({\n            labels: arrayRef.current,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: arrayRef.current,\n                    backgroundColor: colors,\n                    borderColor: \"#313131\",\n                },\n            ],\n        });\n    }, [dataArray, isSorting]);\n\n    async function updateAndPause(\n        pinkValue: number,\n        orangeValue: number\n    ): Promise<void> {\n        await new Promise((resolve: any) => setTimeout(resolve, 2));\n        // const tempArray: number[] = [];\n        // for (const number of dataArray) {\n        //     if (!!number) tempArray.push(number);\n        // }\n        pinkValueRef.current = pinkValue;\n        orangeValueRef.current = orangeValue;\n        setDataArray([...dataArray]);\n    }\n\n    async function bubbleSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        let isSorted: boolean = false;\n        while (!isSorted) {\n            for (let i = 0; i < dataArray.length; i++) {\n                isSorted = true;\n                for (let j = 1; j < dataArray.length - i; j++) {\n                    await updateAndPause(dataArray[j], dataArray[j - 1]);\n                    if (dataArray[j] < dataArray[j - 1]) {\n                        bubbleswap(dataArray, j, j - 1);\n                        isSorted = false;\n                    }\n                }\n            }\n        }\n        setIsSorting(false);\n    }\n\n    async function insertionSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        orangeValueRef.current = 0;\n        for (let i = 1; i < dataArray.length; i++) {\n            let current: number = dataArray[i];\n            let j: number = i - 1;\n            while (j >= 0 && dataArray[j] > current) {\n                dataArray[j + 1] = dataArray[j];\n                j--;\n                dataArray[j + 1] = current;\n                await updateAndPause(dataArray[j], dataArray[j + 1]);\n            }\n        }\n        setDataArray([...dataArray]);\n        setIsSorting(false);\n    }\n\n    async function selectionSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        for (let i = 0; i < dataArray.length; i++) {\n            let minimumIdx = i;\n            for (let j = i + 1; j < dataArray.length; j++) {\n                if (dataArray[j] < dataArray[minimumIdx]) {\n                    minimumIdx = j;\n                }\n                await updateAndPause(dataArray[j], dataArray[minimumIdx]);\n            }\n            if (minimumIdx !== i) {\n                const temp = dataArray[minimumIdx];\n                dataArray[minimumIdx] = dataArray[i];\n                dataArray[i] = temp;\n            }\n        }\n        setDataArray([...dataArray]);\n        setIsSorting(false);\n    }\n\n    async function mergeSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        const length: number = dataArray.length;\n        for (\n            let currentSize: number = 1;\n            currentSize <= length - 1;\n            currentSize = currentSize * 2\n        ) {\n            for (\n                let leftStart = 0;\n                leftStart < length - 1;\n                leftStart += currentSize * 2\n            ) {\n                const middle = leftStart + currentSize - 1;\n                const rightEnd = Math.min(\n                    leftStart + currentSize * 2 - 1,\n                    length - 1\n                );\n                await merge(dataArray, leftStart, middle, rightEnd);\n            }\n        }\n        setIsSorting(false);\n    }\n\n    async function merge(\n        array: number[],\n        left: number,\n        middle: number,\n        right: number\n    ): Promise<void> {\n        const firstNumber: number = middle - left + 1;\n        const secondNumber: number = right - middle;\n        let i: number;\n        let j: number;\n\n        const leftTempArray: number[] = [firstNumber];\n        const rightTempArray: number[] = [secondNumber];\n\n        for (i = 0; i < firstNumber; i++) {\n            leftTempArray[i] = array[left + i];\n        }\n        for (j = 0; j < secondNumber; j++) {\n            rightTempArray[j] = array[middle + 1 + j];\n        }\n\n        i = 0;\n        j = 0;\n        while (i < firstNumber && j < secondNumber) {\n            if (leftTempArray[i] <= rightTempArray[j]) {\n                array[left] = leftTempArray[i];\n                i++;\n                await updateAndPause(array[left - 1], 0);\n            } else {\n                array[left] = rightTempArray[j];\n                j++;\n                await updateAndPause(array[left - 1], 0);\n            }\n            left++;\n        }\n        while (i < firstNumber) {\n            if (!!leftTempArray[i]) {\n                array[left] = leftTempArray[i];\n            }\n\n            i++;\n            left++;\n            await updateAndPause(array[left - 1], 0);\n        }\n        await updateAndPause(0, 0);\n        while (j < secondNumber) {\n            if (!!leftTempArray[i]) {\n                array[left] = rightTempArray[j];\n            }\n            j++;\n            left++;\n            await updateAndPause(array[left - 1], 0);\n        }\n    }\n\n    function sortArray(): void {\n        if (canSort) {\n            switch (sortType) {\n                case \"bubble\":\n                    bubbleSort();\n                    break;\n                case \"insertion\":\n                    insertionSort();\n                    break;\n                case \"merge\":\n                    mergeSort();\n                    break;\n                case \"quick\":\n                    // quickSort();\n                    break;\n                default:\n                    selectionSort();\n            }\n        }\n    }\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar\n                    redraw={true}\n                    data={chartData}\n                    options={{\n                        maintainAspectRatio: false,\n                        animation: false,\n                        legend: {\n                            display: false,\n                        },\n                    }}\n                />\n            </div>\n            {/* TODO put all buttons in their own components}*/}\n            {!isSorting ? (\n                <>\n                    <h2 style={{ textTransform: \"capitalize\" }}>\n                        {sortType} Sort\n                    </h2>\n                    {/* TODO <ActionButtons sortArray={sortArray} setCanSort={setCanSort} dataArray={dataArray} setDataArray={setDataArray} /> */}\n                    <div\n                        style={{\n                            margin: \"15px 0 0\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}>\n                        {canSort ? (\n                            <button\n                                className={\"btn btn-lg btn-info sort-btn\"}\n                                onClick={sortArray}>\n                                Sort It!\n                            </button>\n                        ) : null}\n                        <button\n                            className={\"btn btn-secondary sort-btn\"}\n                            onClick={() => {\n                                setCanSort(true);\n                                setDataArray([...shuffleArray(dataArray)]);\n                            }}>\n                            Shuffle Array\n                        </button>\n                    </div>\n                    {/* TODO <SizeSlider value={dataArray.length} setCanSort={setCanSort} setDataArray={setDataArray} /> */}\n                    <h3>Array Size</h3>\n                    <input\n                        type=\"range\"\n                        min=\"25\"\n                        max=\"125\"\n                        step=\"20\"\n                        /* value = {value} */\n                        value={dataArray.length}\n                        className=\"slider\"\n                        onChange={(e) => {\n                            setCanSort(true);\n                            setDataArray([\n                                ...changeSize(parseInt(e.target.value)),\n                            ]);\n                        }}\n                        style={{ width: \"20vw\" }}\n                    />\n                    <hr />\n                    {/* TODO <SortTypes setSortType={setSortType} sortType={sortType} /> */}\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                        <button\n                            className={buttonClass(\"bubble\", sortType)}\n                            onClick={() => setSortType(\"bubble\")}>\n                            Bubble Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"insertion\", sortType)}\n                            onClick={() => setSortType(\"insertion\")}>\n                            Insertion Sort\n                        </button>\n                        <button\n                            name=\"selection\"\n                            className={buttonClass(\"selection\", sortType)}\n                            onClick={() => setSortType(\"selection\")}>\n                            Selection Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"merge\", sortType)}\n                            onClick={() => setSortType(\"merge\")}>\n                            Merge Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"quick\", sortType)}\n                            onClick={() => setSortType(\"quick\")}>\n                            Quick Sort\n                        </button>\n                    </div>\n                </>\n            ) : (\n                <DotAnimation />\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { shuffleArray } from \"../Algorithms/ShuffleArray\";\nexport default function Array() {\n  _s();\n\n  const [shuffledArray, setShuffledArray] = useState([3, 6, 2, 7, 8, 5, 1, 9, 4, 10]);\n  const [sortType, setSortType] = useState(\"simple\");\n  const [chartData, setchartData] = useState({\n    labels: shuffledArray,\n    datasets: [{\n      label: \"value\",\n      data: shuffledArray,\n      backgroundColor: \"#377E86\"\n    }]\n  });\n\n  function changeSize(size) {\n    const newArray = [];\n\n    for (let i = 1; i <= size; i++) {\n      newArray.push(i);\n    }\n\n    setShuffledArray(shuffleArray(newArray));\n  }\n\n  async function reverseArray() {\n    const newArray = shuffledArray;\n    let firstIdx = 0;\n    let lastIdx = newArray.length - 1;\n\n    while (firstIdx < lastIdx) {\n      // eslint-disable-next-line\n      await new Promise(resolve => setTimeout(function () {\n        let temp = newArray[firstIdx];\n        newArray[firstIdx] = newArray[lastIdx];\n        newArray[lastIdx] = temp;\n        firstIdx++;\n        lastIdx--;\n        setchartData({\n          labels: newArray,\n          datasets: [{\n            label: \"value\",\n            data: newArray,\n            backgroundColor: \"#377E86\"\n          }]\n        });\n        console.log(chartData);\n        resolve();\n      }, 300));\n      setShuffledArray(newArray);\n    }\n  }\n\n  function buttonClass(type) {\n    return type === sortType ? \"btn btn-primary\" : \"btn btn-info\";\n  }\n\n  const chartOptions = {\n    title: {\n      display: true,\n      text: sortType,\n      fontSize: 25\n    },\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Array Size\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"310\",\n      step: \"25\",\n      value: shuffledArray.length,\n      className: \"slider\",\n      onChange: e => changeSize(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      children: [sortType, \" Sort\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"simple\"),\n        onClick: () => setSortType(\"simple\"),\n        children: \"Simple Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"bubble\"),\n        onClick: () => setSortType(\"bubble\"),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"selection\"),\n        onClick: () => setSortType(\"selection\"),\n        children: \"Selection Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"merge\"),\n        onClick: () => setSortType(\"merge\"),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"quick\"),\n        onClick: () => setSortType(\"quick\"),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reverseArray,\n      children: \"click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"7icNr2A6uTA2jmeVZStii7Y4hu4=\");\n\n_c = Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx"],"names":["useState","Bar","shuffleArray","Array","shuffledArray","setShuffledArray","sortType","setSortType","chartData","setchartData","labels","datasets","label","data","backgroundColor","changeSize","size","newArray","i","push","reverseArray","firstIdx","lastIdx","length","Promise","resolve","setTimeout","temp","console","log","buttonClass","type","chartOptions","title","display","text","fontSize","maintainAspectRatio","width","height","justifyContent","margin","e","parseInt","target","value","textTransform"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC5B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAW,CACzD,CADyD,EAEzD,CAFyD,EAGzD,CAHyD,EAIzD,CAJyD,EAKzD,CALyD,EAMzD,CANyD,EAOzD,CAPyD,EAQzD,CARyD,EASzD,CATyD,EAUzD,EAVyD,CAAX,CAAlD;AAYA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAS,QAAT,CAAxC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAS;AAC/CU,IAAAA,MAAM,EAAEN,aADuC;AAE/CO,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,KAAK,EAAE,OADX;AAEIC,MAAAA,IAAI,EAAET,aAFV;AAGIU,MAAAA,eAAe,EAAE;AAHrB,KADM;AAFqC,GAAT,CAA1C;;AAWA,WAASC,UAAT,CAAoBC,IAApB,EAAkC;AAC9B,UAAMC,QAAkB,GAAG,EAA3B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,IAArB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5BD,MAAAA,QAAQ,CAACE,IAAT,CAAcD,CAAd;AACH;;AACDb,IAAAA,gBAAgB,CAACH,YAAY,CAACe,QAAD,CAAb,CAAhB;AACH;;AAED,iBAAeG,YAAf,GAA8B;AAC1B,UAAMH,QAAkB,GAAGb,aAA3B;AACA,QAAIiB,QAAQ,GAAG,CAAf;AACA,QAAIC,OAAO,GAAGL,QAAQ,CAACM,MAAT,GAAkB,CAAhC;;AACA,WAAOF,QAAQ,GAAGC,OAAlB,EAA2B;AACvB;AACA,YAAM,IAAIE,OAAJ,CAAaC,OAAD,IACdC,UAAU,CAAC,YAAY;AACnB,YAAIC,IAAI,GAAGV,QAAQ,CAACI,QAAD,CAAnB;AACAJ,QAAAA,QAAQ,CAACI,QAAD,CAAR,GAAqBJ,QAAQ,CAACK,OAAD,CAA7B;AACAL,QAAAA,QAAQ,CAACK,OAAD,CAAR,GAAoBK,IAApB;AACAN,QAAAA,QAAQ;AACRC,QAAAA,OAAO;AACPb,QAAAA,YAAY,CAAC;AACTC,UAAAA,MAAM,EAAEO,QADC;AAETN,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,KAAK,EAAE,OADX;AAEIC,YAAAA,IAAI,EAAEI,QAFV;AAGIH,YAAAA,eAAe,EAAE;AAHrB,WADM;AAFD,SAAD,CAAZ;AAUAc,QAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAZ;AACAiB,QAAAA,OAAO;AACV,OAlBS,EAkBP,GAlBO,CADR,CAAN;AAqBApB,MAAAA,gBAAgB,CAACY,QAAD,CAAhB;AACH;AACJ;;AAED,WAASa,WAAT,CAAqBC,IAArB,EAAmC;AAC/B,WAAOA,IAAI,KAAKzB,QAAT,GAAoB,iBAApB,GAAwC,cAA/C;AACH;;AAED,QAAM0B,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAE7B,QAAvB;AAAiC8B,MAAAA,QAAQ,EAAE;AAA3C,KADU;AAEjBC,IAAAA,mBAAmB,EAAE;AAFJ,GAArB;AAKA,sBACI;AAAA,4BACI;AACI,MAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,MADJ;AAEHC,QAAAA,MAAM,EAAE,MAFL;AAGHL,QAAAA,OAAO,EAAE,MAHN;AAIHM,QAAAA,cAAc,EAAE,QAJb;AAKHC,QAAAA,MAAM,EAAE;AALL,OADX;AAAA,6BAQI,QAAC,GAAD;AAAK,QAAA,IAAI,EAAEjC,SAAX;AAAsB,QAAA,OAAO,EAAEwB;AAA/B;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI;AAAA;AAAA;AAAA;AAAA,YAXJ,eAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaI;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,GAAG,EAAC,IAFR;AAGI,MAAA,GAAG,EAAC,KAHR;AAII,MAAA,IAAI,EAAC,IAJT;AAKI,MAAA,KAAK,EAAE5B,aAAa,CAACmB,MALzB;AAMI,MAAA,SAAS,EAAC,QANd;AAOI,MAAA,QAAQ,EAAGmB,CAAD,IAAO3B,UAAU,CAAC4B,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAT;AAP/B;AAAA;AAAA;AAAA;AAAA,YAbJ,eAsBI;AAAA;AAAA;AAAA;AAAA,YAtBJ,eAuBI;AAAA;AAAA;AAAA;AAAA,YAvBJ,eAwBI;AAAI,MAAA,KAAK,EAAE;AAAEC,QAAAA,aAAa,EAAE;AAAjB,OAAX;AAAA,iBAA6CxC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBJ,eAyBI;AAAK,MAAA,KAAK,EAAE;AAAE4B,QAAAA,OAAO,EAAE,MAAX;AAAmBM,QAAAA,cAAc,EAAE;AAAnC,OAAZ;AAAA,8BACI;AACI,QAAA,SAAS,EAAEV,WAAW,CAAC,QAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,QAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,QAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,QAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAWI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,WAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,WAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAgBI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,OAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,OAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ,eAqBI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,OAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,OAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBJ,eAoDI;AAAQ,MAAA,OAAO,EAAEa,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApDJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwDH;;GAjIuBjB,K;;KAAAA,K","sourcesContent":["import { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { shuffleArray } from \"../Algorithms/ShuffleArray\";\n\nexport default function Array() {\n    const [shuffledArray, setShuffledArray] = useState<number[]>([\n        3,\n        6,\n        2,\n        7,\n        8,\n        5,\n        1,\n        9,\n        4,\n        10,\n    ]);\n    const [sortType, setSortType] = useState<string>(\"simple\");\n    const [chartData, setchartData] = useState<object>({\n        labels: shuffledArray,\n        datasets: [\n            {\n                label: \"value\",\n                data: shuffledArray,\n                backgroundColor: \"#377E86\",\n            },\n        ],\n    });\n\n    function changeSize(size: number) {\n        const newArray: number[] = [];\n        for (let i = 1; i <= size; i++) {\n            newArray.push(i);\n        }\n        setShuffledArray(shuffleArray(newArray));\n    }\n\n    async function reverseArray() {\n        const newArray: number[] = shuffledArray;\n        let firstIdx = 0;\n        let lastIdx = newArray.length - 1;\n        while (firstIdx < lastIdx) {\n            // eslint-disable-next-line\n            await new Promise((resolve: any) =>\n                setTimeout(function () {\n                    let temp = newArray[firstIdx];\n                    newArray[firstIdx] = newArray[lastIdx];\n                    newArray[lastIdx] = temp;\n                    firstIdx++;\n                    lastIdx--;\n                    setchartData({\n                        labels: newArray,\n                        datasets: [\n                            {\n                                label: \"value\",\n                                data: newArray,\n                                backgroundColor: \"#377E86\",\n                            },\n                        ],\n                    });\n                    console.log(chartData);\n                    resolve();\n                }, 300)\n            );\n            setShuffledArray(newArray)\n        }\n    }\n\n    function buttonClass(type: string) {\n        return type === sortType ? \"btn btn-primary\" : \"btn btn-info\";\n    }\n\n    const chartOptions = {\n        title: { display: true, text: sortType, fontSize: 25 },\n        maintainAspectRatio: false,\n    };\n\n    return (\n        <div>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar data={chartData} options={chartOptions} />\n            </div>\n            <br />\n            <h2>Array Size</h2>\n            <input\n                type=\"range\"\n                min=\"10\"\n                max=\"310\"\n                step=\"25\"\n                value={shuffledArray.length}\n                className=\"slider\"\n                onChange={(e) => changeSize(parseInt(e.target.value))}\n            />\n            <br />\n            <br />\n            <h2 style={{ textTransform: \"capitalize\" }}>{sortType} Sort</h2>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                <button\n                    className={buttonClass(\"simple\")}\n                    onClick={() => setSortType(\"simple\")}>\n                    Simple Sort\n                </button>\n                <button\n                    className={buttonClass(\"bubble\")}\n                    onClick={() => setSortType(\"bubble\")}>\n                    Bubble Sort\n                </button>\n                <button\n                    className={buttonClass(\"selection\")}\n                    onClick={() => setSortType(\"selection\")}>\n                    Selection Sort\n                </button>\n                <button\n                    className={buttonClass(\"merge\")}\n                    onClick={() => setSortType(\"merge\")}>\n                    Merge Sort\n                </button>\n                <button\n                    className={buttonClass(\"quick\")}\n                    onClick={() => setSortType(\"quick\")}>\n                    Quick Sort\n                </button>\n            </div>\n            <button onClick={reverseArray}>click me!</button>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { shuffleArray } from \"../Algorithms/ShuffleArray\";\nexport default function Array() {\n  _s();\n\n  const [sortType, setSortType] = useState(\"simple\");\n  const arrayRef = useRef([3, 5, 6, 7, 3, 1, 2, 8]);\n  const [chartData, setChartData] = useState({\n    labels: arrayRef.current,\n    datasets: [{\n      label: \"value\",\n      data: arrayRef.current,\n      backgroundColor: \"#377E86\"\n    }]\n  });\n\n  function reverseArray() {\n    const newArray = arrayRef.current;\n    console.log(\"before\", newArray);\n    let firstIdx = 0;\n    let lastIdx = newArray.length - 1;\n\n    while (firstIdx < lastIdx) {\n      let temp = newArray[firstIdx];\n      newArray[firstIdx] = newArray[lastIdx];\n      newArray[lastIdx] = temp;\n      firstIdx++;\n      lastIdx--;\n    }\n\n    setData(newArray);\n  }\n\n  function setData(newArray) {\n    arrayRef.current = newArray;\n    setChartData({\n      labels: newArray,\n      datasets: [{\n        label: \"value\",\n        data: newArray,\n        backgroundColor: \"#377E86\"\n      }]\n    });\n  }\n\n  function changeSize(size) {\n    const newArray = [];\n\n    for (let i = 1; i <= size; i++) {\n      newArray.push(i);\n    }\n\n    setData(shuffleArray(newArray));\n  }\n\n  function buttonClass(type) {\n    return type === sortType ? \"btn btn-primary\" : \"btn btn-info\";\n  }\n\n  const chartOptions = {\n    title: {\n      display: true,\n      text: sortType,\n      fontSize: 25\n    },\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Array Size\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"310\",\n      step: \"25\",\n      value: arrayRef.current.length,\n      className: \"slider\",\n      onChange: e => changeSize(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textTransform: \"capitalize\"\n      },\n      children: [sortType, \" Sort\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"simple\"),\n        onClick: () => setSortType(\"simple\"),\n        children: \"Simple Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"bubble\"),\n        onClick: () => setSortType(\"bubble\"),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"selection\"),\n        onClick: () => setSortType(\"selection\"),\n        children: \"Selection Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"merge\"),\n        onClick: () => setSortType(\"merge\"),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"quick\"),\n        onClick: () => setSortType(\"quick\"),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reverseArray,\n      children: \"click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"p+AGCOKKsj7+KqKITcVXWz+ugXM=\");\n\n_c = Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx"],"names":["useState","useRef","Bar","shuffleArray","Array","sortType","setSortType","arrayRef","chartData","setChartData","labels","current","datasets","label","data","backgroundColor","reverseArray","newArray","console","log","firstIdx","lastIdx","length","temp","setData","changeSize","size","i","push","buttonClass","type","chartOptions","title","display","text","fontSize","maintainAspectRatio","width","height","justifyContent","margin","e","parseInt","target","value","textTransform"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAS,QAAT,CAAxC;AACA,QAAMO,QAAQ,GAAGN,MAAM,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAX,CAAvB;AAEA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAS;AAC/CU,IAAAA,MAAM,EAAEH,QAAQ,CAACI,OAD8B;AAE/CC,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,KAAK,EAAE,OADX;AAEIC,MAAAA,IAAI,EAAEP,QAAQ,CAACI,OAFnB;AAGII,MAAAA,eAAe,EAAE;AAHrB,KADM;AAFqC,GAAT,CAA1C;;AAWA,WAASC,YAAT,GAAwB;AACpB,UAAMC,QAAkB,GAAGV,QAAQ,CAACI,OAApC;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,QAAtB;AAEA,QAAIG,QAAgB,GAAG,CAAvB;AACA,QAAIC,OAAe,GAAGJ,QAAQ,CAACK,MAAT,GAAkB,CAAxC;;AACA,WAAOF,QAAQ,GAAGC,OAAlB,EAA2B;AACvB,UAAIE,IAAI,GAAGN,QAAQ,CAACG,QAAD,CAAnB;AACAH,MAAAA,QAAQ,CAACG,QAAD,CAAR,GAAqBH,QAAQ,CAACI,OAAD,CAA7B;AACAJ,MAAAA,QAAQ,CAACI,OAAD,CAAR,GAAoBE,IAApB;AACAH,MAAAA,QAAQ;AACRC,MAAAA,OAAO;AACV;;AACDG,IAAAA,OAAO,CAACP,QAAD,CAAP;AACH;;AAED,WAASO,OAAT,CAAiBP,QAAjB,EAAqC;AACjCV,IAAAA,QAAQ,CAACI,OAAT,GAAmBM,QAAnB;AACAR,IAAAA,YAAY,CAAC;AACTC,MAAAA,MAAM,EAAEO,QADC;AAETL,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,KAAK,EAAE,OADX;AAEIC,QAAAA,IAAI,EAAEG,QAFV;AAGIF,QAAAA,eAAe,EAAE;AAHrB,OADM;AAFD,KAAD,CAAZ;AAUH;;AAED,WAASU,UAAT,CAAoBC,IAApB,EAAkC;AAC9B,UAAMT,QAAkB,GAAG,EAA3B;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,IAArB,EAA2BC,CAAC,EAA5B,EAAgC;AAC5BV,MAAAA,QAAQ,CAACW,IAAT,CAAcD,CAAd;AACH;;AACDH,IAAAA,OAAO,CAACrB,YAAY,CAACc,QAAD,CAAb,CAAP;AACH;;AAED,WAASY,WAAT,CAAqBC,IAArB,EAAmC;AAC/B,WAAOA,IAAI,KAAKzB,QAAT,GAAoB,iBAApB,GAAwC,cAA/C;AACH;;AAED,QAAM0B,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAE7B,QAAvB;AAAiC8B,MAAAA,QAAQ,EAAE;AAA3C,KADU;AAEjBC,IAAAA,mBAAmB,EAAE;AAFJ,GAArB;AAKA,sBACI;AAAA,4BACI;AACI,MAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,MADJ;AAEHC,QAAAA,MAAM,EAAE,MAFL;AAGHL,QAAAA,OAAO,EAAE,MAHN;AAIHM,QAAAA,cAAc,EAAE,QAJb;AAKHC,QAAAA,MAAM,EAAE;AALL,OADX;AAAA,6BAQI,QAAC,GAAD;AAAK,QAAA,IAAI,EAAEhC,SAAX;AAAsB,QAAA,OAAO,EAAEuB;AAA/B;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI;AAAA;AAAA;AAAA;AAAA,YAXJ,eAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaI;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,GAAG,EAAC,IAFR;AAGI,MAAA,GAAG,EAAC,KAHR;AAII,MAAA,IAAI,EAAC,IAJT;AAKI,MAAA,KAAK,EAAExB,QAAQ,CAACI,OAAT,CAAiBW,MAL5B;AAMI,MAAA,SAAS,EAAC,QANd;AAOI,MAAA,QAAQ,EAAGmB,CAAD,IAAOhB,UAAU,CAACiB,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAT;AAP/B;AAAA;AAAA;AAAA;AAAA,YAbJ,eAsBI;AAAA;AAAA;AAAA;AAAA,YAtBJ,eAuBI;AAAA;AAAA;AAAA;AAAA,YAvBJ,eAwBI;AAAI,MAAA,KAAK,EAAE;AAAEC,QAAAA,aAAa,EAAE;AAAjB,OAAX;AAAA,iBAA6CxC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBJ,eAyBI;AAAK,MAAA,KAAK,EAAE;AAAE4B,QAAAA,OAAO,EAAE,MAAX;AAAmBM,QAAAA,cAAc,EAAE;AAAnC,OAAZ;AAAA,8BACI;AACI,QAAA,SAAS,EAAEV,WAAW,CAAC,QAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,QAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,QAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,QAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAWI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,WAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,WAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAgBI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,OAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,OAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ,eAqBI;AACI,QAAA,SAAS,EAAEuB,WAAW,CAAC,OAAD,CAD1B;AAEI,QAAA,OAAO,EAAE,MAAMvB,WAAW,CAAC,OAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBJ,eAoDI;AAAQ,MAAA,OAAO,EAAEU,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApDJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwDH;;GAtHuBZ,K;;KAAAA,K","sourcesContent":["import { useState, useRef } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { shuffleArray } from \"../Algorithms/ShuffleArray\";\n\nexport default function Array() {\n    const [sortType, setSortType] = useState<string>(\"simple\");\n    const arrayRef = useRef<number[]>([3, 5, 6, 7, 3, 1, 2, 8]);\n\n    const [chartData, setChartData] = useState<object>({\n        labels: arrayRef.current,\n        datasets: [\n            {\n                label: \"value\",\n                data: arrayRef.current,\n                backgroundColor: \"#377E86\",\n            },\n        ],\n    });\n\n    function reverseArray() {\n        const newArray: number[] = arrayRef.current;\n        console.log(\"before\", newArray);\n\n        let firstIdx: number = 0;\n        let lastIdx: number = newArray.length - 1;\n        while (firstIdx < lastIdx) {\n            let temp = newArray[firstIdx];\n            newArray[firstIdx] = newArray[lastIdx];\n            newArray[lastIdx] = temp;\n            firstIdx++;\n            lastIdx--;\n        }\n        setData(newArray);\n    }\n\n    function setData(newArray: number[]) {\n        arrayRef.current = newArray;\n        setChartData({\n            labels: newArray,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: newArray,\n                    backgroundColor: \"#377E86\",\n                },\n            ],\n        });\n    }\n\n    function changeSize(size: number) {\n        const newArray: number[] = [];\n        for (let i = 1; i <= size; i++) {\n            newArray.push(i);\n        }\n        setData(shuffleArray(newArray));\n    }\n\n    function buttonClass(type: string) {\n        return type === sortType ? \"btn btn-primary\" : \"btn btn-info\";\n    }\n\n    const chartOptions = {\n        title: { display: true, text: sortType, fontSize: 25 },\n        maintainAspectRatio: false,\n    };\n\n    return (\n        <div>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar data={chartData} options={chartOptions} />\n            </div>\n            <br />\n            <h2>Array Size</h2>\n            <input\n                type=\"range\"\n                min=\"10\"\n                max=\"310\"\n                step=\"25\"\n                value={arrayRef.current.length}\n                className=\"slider\"\n                onChange={(e) => changeSize(parseInt(e.target.value))}\n            />\n            <br />\n            <br />\n            <h2 style={{ textTransform: \"capitalize\" }}>{sortType} Sort</h2>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                <button\n                    className={buttonClass(\"simple\")}\n                    onClick={() => setSortType(\"simple\")}>\n                    Simple Sort\n                </button>\n                <button\n                    className={buttonClass(\"bubble\")}\n                    onClick={() => setSortType(\"bubble\")}>\n                    Bubble Sort\n                </button>\n                <button\n                    className={buttonClass(\"selection\")}\n                    onClick={() => setSortType(\"selection\")}>\n                    Selection Sort\n                </button>\n                <button\n                    className={buttonClass(\"merge\")}\n                    onClick={() => setSortType(\"merge\")}>\n                    Merge Sort\n                </button>\n                <button\n                    className={buttonClass(\"quick\")}\n                    onClick={() => setSortType(\"quick\")}>\n                    Quick Sort\n                </button>\n            </div>\n            <button onClick={reverseArray}>click me!</button>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
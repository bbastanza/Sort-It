{"ast":null,"code":"import { bubbleswap } from \"../helpers/bubbleswap\";\nexport function quickSort(array, start = 0, end = array.length - 1) {\n  if (start >= end) return;\n  let index = partition(array, start, end);\n  quickSort(array, start, index - 1);\n  quickSort(array, index + 1, end);\n}\n\nfunction partition(array, start, end) {\n  let pivotIndex = start;\n  let pivotValue = array[end];\n\n  for (let i = start; i < end; i++) {\n    if (array[i] < pivotValue) {\n      bubbleswap(array, i, pivotIndex);\n      pivotIndex++;\n    }\n  }\n\n  bubbleswap(array, pivotIndex, end);\n  return pivotIndex;\n}","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/referenceAlgorithms/quickSort.ts"],"names":["bubbleswap","quickSort","array","start","end","length","index","partition","pivotIndex","pivotValue","i"],"mappings":"AAAA,SAASA,UAAT,QAA2B,uBAA3B;AAEA,OAAO,SAASC,SAAT,CACHC,KADG,EAEHC,KAAa,GAAG,CAFb,EAGHC,GAAW,GAAGF,KAAK,CAACG,MAAN,GAAe,CAH1B,EAIL;AACE,MAAIF,KAAK,IAAIC,GAAb,EAAkB;AAClB,MAAIE,KAAK,GAAGC,SAAS,CAACL,KAAD,EAAQC,KAAR,EAAeC,GAAf,CAArB;AACAH,EAAAA,SAAS,CAACC,KAAD,EAAQC,KAAR,EAAeG,KAAK,GAAG,CAAvB,CAAT;AACAL,EAAAA,SAAS,CAACC,KAAD,EAAQI,KAAK,GAAG,CAAhB,EAAmBF,GAAnB,CAAT;AACH;;AAED,SAASG,SAAT,CAAmBL,KAAnB,EAAoCC,KAApC,EAAmDC,GAAnD,EAAgE;AAC5D,MAAII,UAAU,GAAGL,KAAjB;AACA,MAAIM,UAAU,GAAGP,KAAK,CAACE,GAAD,CAAtB;;AACA,OAAK,IAAIM,CAAC,GAAGP,KAAb,EAAoBO,CAAC,GAAGN,GAAxB,EAA6BM,CAAC,EAA9B,EAAkC;AAC9B,QAAIR,KAAK,CAACQ,CAAD,CAAL,GAAWD,UAAf,EAA2B;AACvBT,MAAAA,UAAU,CAACE,KAAD,EAAQQ,CAAR,EAAWF,UAAX,CAAV;AACAA,MAAAA,UAAU;AACb;AACJ;;AACDR,EAAAA,UAAU,CAACE,KAAD,EAAQM,UAAR,EAAoBJ,GAApB,CAAV;AACA,SAAOI,UAAP;AACH","sourcesContent":["import { bubbleswap } from \"../helpers/bubbleswap\";\n\nexport function quickSort(\n    array: number[],\n    start: number = 0,\n    end: number = array.length - 1\n) {\n    if (start >= end) return;\n    let index = partition(array, start, end);\n    quickSort(array, start, index - 1);\n    quickSort(array, index + 1, end);\n}\n\nfunction partition(array: number[], start: number, end: number) {\n    let pivotIndex = start;\n    let pivotValue = array[end];\n    for (let i = start; i < end; i++) {\n        if (array[i] < pivotValue) {\n            bubbleswap(array, i, pivotIndex);\n            pivotIndex++;\n        }\n    }\n    bubbleswap(array, pivotIndex, end);\n    return pivotIndex;\n}\n"]},"metadata":{},"sourceType":"module"}
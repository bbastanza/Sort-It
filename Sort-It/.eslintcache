[{"/home/stanzu10/Dev/git/sortit/Sort-It/src/index.tsx":"1","/home/stanzu10/Dev/git/sortit/Sort-It/src/reportWebVitals.ts":"2","/home/stanzu10/Dev/git/sortit/Sort-It/src/App.tsx":"3","/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx":"4","/home/stanzu10/Dev/git/sortit/Sort-It/src/Algorithms/shuffleArray.ts":"5","/home/stanzu10/Dev/git/sortit/Sort-It/src/helpers/calculateTimeDelay.ts":"6","/home/stanzu10/Dev/git/sortit/Sort-It/src/helpers/buttonClass.ts":"7","/home/stanzu10/Dev/git/sortit/Sort-It/src/helpers/bubbleswap.ts":"8","/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Footer.tsx":"9","/home/stanzu10/Dev/git/sortit/Sort-It/src/components/DotAnimation.tsx":"10"},{"size":503,"mtime":1611637581812,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1611505257832,"results":"13","hashOfConfig":"12"},{"size":284,"mtime":1612148516313,"results":"14","hashOfConfig":"12"},{"size":7309,"mtime":1612170624184,"results":"15","hashOfConfig":"12"},{"size":603,"mtime":1612146579908,"results":"16","hashOfConfig":"12"},{"size":488,"mtime":1612147421831,"results":"17","hashOfConfig":"12"},{"size":167,"mtime":1612229247181,"results":"18","hashOfConfig":"12"},{"size":397,"mtime":1612148196180,"results":"19","hashOfConfig":"12"},{"size":676,"mtime":1612169048765,"results":"20","hashOfConfig":"12"},{"size":541,"mtime":1612169099493,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"gzyfsj",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/stanzu10/Dev/git/sortit/Sort-It/src/index.tsx",[],["44","45"],"/home/stanzu10/Dev/git/sortit/Sort-It/src/reportWebVitals.ts",[],"/home/stanzu10/Dev/git/sortit/Sort-It/src/App.tsx",[],"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx",["46"],"import { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport DotAnimation from \"./DotAnimation\";\nimport {\n    shuffleArray,\n    initialArray as initArray,\n} from \"../Algorithms/shuffleArray\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { buttonClass } from \"../helpers/buttonClass\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport { ChartData } from \"../helpers/interfaces\";\n\nenum SortingTypes{\n    \"bubble\", \"insertion\", \"selection\", \"merge\", \"quick\"\n}\n\nexport default function Array() {\n    const [isSorting, setIsSorting] = useState<boolean>(false);\n    const [sortType, setSortType] = useState<string>(\"bubble\");\n    const initialArray = shuffleArray(initArray);\n    const [dataArray, setDataArray] = useState<number[]>(initialArray);\n\n    const [chartData, setChartData] = useState<ChartData>({\n        labels: initialArray,\n        datasets: [\n            {\n                label: \"value\",\n                data: initialArray,\n                backgroundColor: \"#377E86\",\n                borderColor: \"#313131\",\n            },\n        ],\n    });\n\n    const arrayRef = useRef<number[]>([]);\n    arrayRef.current = dataArray;\n\n    useEffect(() => {\n        setChartData({\n            labels: arrayRef.current,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: arrayRef.current,\n                    backgroundColor: \"#377E86\",\n                    borderColor: \"#313131\",\n                },\n            ],\n        });\n    }, [dataArray]);\n\n    async function bubbleSort() {\n        setIsSorting(true);\n        let isSorted: boolean = false;\n        while (!isSorted) {\n            for (let i = 0; i < dataArray.length; i++) {\n                isSorted = true;\n\n                for (let j = 1; j < dataArray.length - i; j++) {\n                    if (dataArray[j] < dataArray[j - 1]) {\n                        const updatedArray = await bubbleswap(\n                            dataArray,\n                            j,\n                            j - 1,\n                            calculateTimeDelay(dataArray.length)\n                        );\n                        setDataArray([...updatedArray]);\n                        isSorted = false;\n                    }\n                }\n            }\n        }\n        setIsSorting(false);\n    }\n\n    async function insertionSort() {\n        setIsSorting(true);\n        const newArray: number[] = dataArray;\n        for (let i = 1; i < newArray.length; i++) {\n            let current: number = newArray[i];\n            let j: number = i - 1;\n\n            while (j >= 0 && newArray[j] > current)\n                // eslint-disable-next-line\n                await new Promise((resolve: any) =>\n                    setTimeout(function () {\n                        newArray[j + 1] = newArray[j];\n                        j--;\n                        newArray[j + 1] = current;\n                        resolve();\n                    }, calculateTimeDelay(dataArray.length))\n                );\n            setDataArray([...newArray]);\n        }\n        setIsSorting(false);\n    }\n\n    function sortArray() {\n        switch (sortType) {\n            case \"bubble\":\n                bubbleSort();\n                break;\n            case \"insertion\":\n                insertionSort();\n                break;\n            case \"merge\":\n                // mergeSort();\n                break;\n            case \"quick\":\n                // quickSort();\n                break;\n            default:\n                // selectionSort();\n                break;\n        }\n    }\n\n    function changeSize(size: number) {\n        const newArray: number[] = [];\n        for (let i = 1; i <= size; i++) {\n            newArray.push(i);\n        }\n        setDataArray([...shuffleArray(newArray)]);\n    }\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <h2 style={{ textTransform: \"capitalize\" }}>{sortType} Sort</h2>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar\n                    data={chartData}\n                    options={{\n                        maintainAspectRatio: false,\n                        animation: false,\n                    }}\n                />\n            </div>\n            {!isSorting ? (\n                <>\n                    <div\n                        style={{\n                            margin: \"15px 0 0\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}>\n                        <button\n                            className={\"btn btn-lg btn-info sort-btn\"}\n                            onClick={sortArray}>\n                            Sort It!\n                        </button>\n                        <button\n                            className={\"btn btn-secondary sort-btn\"}\n                            onClick={() =>\n                                setDataArray([...shuffleArray(dataArray)])\n                            }>\n                            Shuffle Array\n                        </button>\n                    </div>\n                    <h3>Array Size</h3>\n                    <input\n                        type=\"range\"\n                        min=\"25\"\n                        max=\"125\"\n                        step=\"20\"\n                        value={dataArray.length}\n                        className=\"slider\"\n                        onChange={(e) => changeSize(parseInt(e.target.value))}\n                        style={{ width: \"20vw\" }}\n                    />\n                    <hr />\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                        <button\n                            className={buttonClass(\"bubble\", sortType)}\n                            onClick={() => setSortType(\"bubble\")}>\n                            Bubble Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"insertion\", sortType)}\n                            onClick={() => setSortType(\"insertion\")}>\n                            Insertion Sort\n                        </button>\n                        <button\n                            name=\"selection\"\n                            className={buttonClass(\"selection\", sortType)}\n                            onClick={() => setSortType(\"selection\")}>\n                            Selection Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"merge\", sortType)}\n                            onClick={() => setSortType(\"merge\")}>\n                            Merge Sort\n                        </button>\n                        <button\n                            className={buttonClass(\"quick\", sortType)}\n                            onClick={() => setSortType(\"quick\")}>\n                            Quick Sort\n                        </button>\n                    </div>\n                </>\n            ) : (\n                <DotAnimation />\n            )}\n        </div>\n    );\n}\n","/home/stanzu10/Dev/git/sortit/Sort-It/src/Algorithms/shuffleArray.ts",[],"/home/stanzu10/Dev/git/sortit/Sort-It/src/helpers/calculateTimeDelay.ts",[],"/home/stanzu10/Dev/git/sortit/Sort-It/src/helpers/buttonClass.ts",[],"/home/stanzu10/Dev/git/sortit/Sort-It/src/helpers/bubbleswap.ts",[],"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Footer.tsx",[],"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/DotAnimation.tsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":13,"column":6,"nodeType":"53","messageId":"54","endLine":13,"endColumn":18},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"@typescript-eslint/no-unused-vars","'SortingTypes' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]
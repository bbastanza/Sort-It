{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nexport default function Array() {\n  _s();\n\n  const [shuffledArray, setShuffledArray] = useState([]);\n\n  function shuffleArray(arr) {\n    let currentIdx = arr.length;\n\n    while (0 !== currentIdx) {\n      let randomIdx = Math.floor(Math.random() * currentIdx);\n      currentIdx -= 1;\n      let tmp = arr[currentIdx];\n      arr[currentIdx] = arr[randomIdx];\n      arr[randomIdx] = tmp;\n    }\n\n    return arr;\n  }\n\n  function changeSize(size) {\n    const newArray = [];\n\n    for (let i = 1; i <= size; i++) {\n      newArray.push(i);\n    }\n\n    setShuffledArray(shuffleArray(newArray));\n  }\n\n  const chartData = {\n    labels: shuffledArray,\n    datasets: [{\n      label: \"value\",\n      data: shuffledArray,\n      backgroundColor: \"#377E86\"\n    }]\n  };\n  const chartOptions = {\n    title: {\n      display: true,\n      text: \"Sorting Algorithm\",\n      fontSize: 25\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Array Size\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"210\",\n      step: \"25\",\n      className: \"slider\",\n      onChange: e => changeSize(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"WZJzOhv/FQlECvoUY2Saam7zKf8=\");\n\n_c = Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx"],"names":["React","useState","Bar","Array","shuffledArray","setShuffledArray","shuffleArray","arr","currentIdx","length","randomIdx","Math","floor","random","tmp","changeSize","size","newArray","i","push","chartData","labels","datasets","label","data","backgroundColor","chartOptions","title","display","text","fontSize","e","parseInt","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC5B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAW,EAAX,CAAlD;;AAEA,WAASK,YAAT,CAAsBC,GAAtB,EAAqC;AACjC,QAAIC,UAAU,GAAGD,GAAG,CAACE,MAArB;;AACA,WAAO,MAAMD,UAAb,EAAyB;AACrB,UAAIE,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,UAA3B,CAAhB;AACAA,MAAAA,UAAU,IAAI,CAAd;AACA,UAAIM,GAAG,GAAGP,GAAG,CAACC,UAAD,CAAb;AACAD,MAAAA,GAAG,CAACC,UAAD,CAAH,GAAkBD,GAAG,CAACG,SAAD,CAArB;AACAH,MAAAA,GAAG,CAACG,SAAD,CAAH,GAAiBI,GAAjB;AACH;;AACD,WAAOP,GAAP;AACH;;AAED,WAASQ,UAAT,CAAoBC,IAApB,EAAkC;AAC9B,UAAMC,QAAkB,GAAG,EAA3B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,IAArB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5BD,MAAAA,QAAQ,CAACE,IAAT,CAAcD,CAAd;AACH;;AACDb,IAAAA,gBAAgB,CAACC,YAAY,CAACW,QAAD,CAAb,CAAhB;AACH;;AAED,QAAMG,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAEjB,aADM;AAEdkB,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,KAAK,EAAE,OADX;AAEIC,MAAAA,IAAI,EAAEpB,aAFV;AAGIqB,MAAAA,eAAe,EAAE;AAHrB,KADM;AAFI,GAAlB;AAUA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAE,mBAAvB;AAA4CC,MAAAA,QAAQ,EAAE;AAAtD;AADU,GAArB;AAIA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEV,SAAX;AAAsB,MAAA,OAAO,EAAEM;AAA/B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,GAAG,EAAC,IAFR;AAGI,MAAA,GAAG,EAAC,KAHR;AAII,MAAA,IAAI,EAAC,IAJT;AAKI,MAAA,SAAS,EAAC,QALd;AAMI,MAAA,QAAQ,EAAEK,CAAC,IAAIhB,UAAU,CAACiB,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAT;AAN7B;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAnDuB/B,K;;KAAAA,K","sourcesContent":["import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nexport default function Array() {\n    const [shuffledArray, setShuffledArray] = useState<number[]>([]);\n\n    function shuffleArray(arr: number[]) {\n        let currentIdx = arr.length;\n        while (0 !== currentIdx) {\n            let randomIdx = Math.floor(Math.random() * currentIdx);\n            currentIdx -= 1;\n            let tmp = arr[currentIdx];\n            arr[currentIdx] = arr[randomIdx];\n            arr[randomIdx] = tmp;\n        }\n        return arr;\n    }\n\n    function changeSize(size: number) {\n        const newArray: number[] = [];\n        for (let i = 1; i <= size; i++) {\n            newArray.push(i);\n        }\n        setShuffledArray(shuffleArray(newArray));\n    }\n\n    const chartData = {\n        labels: shuffledArray,\n        datasets: [\n            {\n                label: \"value\",\n                data: shuffledArray,\n                backgroundColor: \"#377E86\",\n            },\n        ],\n    };\n    const chartOptions = {\n        title: { display: true, text: \"Sorting Algorithm\", fontSize: 25 },\n    };\n\n    return (\n        <div>\n            <Bar data={chartData} options={chartOptions} />\n            <h4>Array Size</h4>\n            <input\n                type=\"range\"\n                min=\"10\"\n                max=\"210\"\n                step=\"25\"\n                className=\"slider\"\n                onChange={e => changeSize(parseInt(e.target.value))}\n            />\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
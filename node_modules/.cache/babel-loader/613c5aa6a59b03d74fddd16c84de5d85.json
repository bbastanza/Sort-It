{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { shuffleArray } from \"../Algorithms/ShuffleArray\";\nimport { BarChart, Tooltip, YAxis, XAxis, Bar } from \"recharts\";\nexport default function Array() {\n  _s();\n\n  const [sortType, setSortType] = useState(\"simple\");\n  const [shuffledArray, setShuffledArray] = useState([3, 6, 2, 7, 8, 5, 1, 9, 4, 10]);\n  const chartDataRef = Object.keys(shuffledArray).map(key => {\n    return {\n      key,\n      value: key\n    };\n  });\n\n  function handleClick() {}\n\n  function changeSize(size) {\n    const newArray = [];\n\n    for (let i = 1; i <= size; i++) {\n      newArray.push(i);\n    }\n\n    setShuffledArray(shuffleArray(newArray));\n  }\n\n  function buttonClass(type) {\n    return type === sortType ? \"btn btn-primary\" : \"btn btn-info\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textTransform: \"capitalize\"\n        },\n        children: [sortType, \" Sort\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        width: 800,\n        height: 500,\n        data: chartDataRef,\n        margin: {\n          top: 5,\n          right: 20,\n          left: 10,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"value\",\n          fill: \"#313131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Array Size\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"310\",\n      step: \"25\",\n      value: shuffledArray.length,\n      className: \"slider\",\n      onChange: e => changeSize(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"simple\"),\n        onClick: () => setSortType(\"simple\"),\n        children: \"Simple Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"bubble\"),\n        onClick: () => setSortType(\"bubble\"),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"selection\"),\n        onClick: () => setSortType(\"selection\"),\n        children: \"Selection Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"merge\"),\n        onClick: () => setSortType(\"merge\"),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: buttonClass(\"quick\"),\n        onClick: () => setSortType(\"quick\"),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Array, \"//N8do5AoqZyNf3znCiYIADxPU0=\");\n\n_c = Array;\n\nvar _c;\n\n$RefreshReg$(_c, \"Array\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Array.tsx"],"names":["useState","shuffleArray","BarChart","Tooltip","YAxis","XAxis","Bar","Array","sortType","setSortType","shuffledArray","setShuffledArray","chartDataRef","Object","keys","map","key","value","handleClick","changeSize","size","newArray","i","push","buttonClass","type","width","height","display","justifyContent","margin","textTransform","top","right","left","bottom","length","e","parseInt","target"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { shuffleArray } from \"../Algorithms/ShuffleArray\";\nimport { reverseArray } from \"../Algorithms/reverseArray\";\nimport { BarChart, Tooltip, YAxis, XAxis, Line, Bar } from \"recharts\";\n\nexport default function Array() {\n    const [sortType, setSortType] = useState<string>(\"simple\");\n    const [shuffledArray, setShuffledArray] = useState<number[]>([\n        3,\n        6,\n        2,\n        7,\n        8,\n        5,\n        1,\n        9,\n        4,\n        10,\n    ]);\n    const chartDataRef: any = Object.keys(shuffledArray).map((key) => {\n        return {\n            key,\n            value: key,\n        };\n    });\n    function handleClick() {}\n\n    function changeSize(size: number) {\n        const newArray: number[] = [];\n        for (let i = 1; i <= size; i++) {\n            newArray.push(i);\n        }\n        setShuffledArray(shuffleArray(newArray));\n    }\n\n    function buttonClass(type: string) {\n        return type === sortType ? \"btn btn-primary\" : \"btn btn-info\";\n    }\n\n    return (\n        <div>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <h2 style={{ textTransform: \"capitalize\" }}>{sortType} Sort</h2>\n                <BarChart\n                    width={800}\n                    height={500}\n                    data={chartDataRef}\n                    margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>\n                    <XAxis dataKey=\"key\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"value\" fill=\"#313131\" />\n                </BarChart>\n            </div>\n            <br />\n            <h2>Array Size</h2>\n            <input\n                type=\"range\"\n                min=\"10\"\n                max=\"310\"\n                step=\"25\"\n                value={shuffledArray.length}\n                className=\"slider\"\n                onChange={(e) => changeSize(parseInt(e.target.value))}\n            />\n            <br />\n            <br />\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                <button\n                    className={buttonClass(\"simple\")}\n                    onClick={() => setSortType(\"simple\")}>\n                    Simple Sort\n                </button>\n                <button\n                    className={buttonClass(\"bubble\")}\n                    onClick={() => setSortType(\"bubble\")}>\n                    Bubble Sort\n                </button>\n                <button\n                    className={buttonClass(\"selection\")}\n                    onClick={() => setSortType(\"selection\")}>\n                    Selection Sort\n                </button>\n                <button\n                    className={buttonClass(\"merge\")}\n                    onClick={() => setSortType(\"merge\")}>\n                    Merge Sort\n                </button>\n                <button\n                    className={buttonClass(\"quick\")}\n                    onClick={() => setSortType(\"quick\")}>\n                    Quick Sort\n                </button>\n            </div>\n            <button onClick={handleClick}>click me!</button>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
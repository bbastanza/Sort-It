{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Visualizer.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { initialArray as initArray, initialChartValue } from \"./../helpers/initialValues\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport DotAnimation from \"./DotAnimation\";\nimport SortTypes from \"./SortTypes\";\nimport SizeSlider from \"./SizeSlider\";\nimport ActionButtons from \"./ActionButtons\";\nexport default function Visualizer() {\n  _s();\n\n  const [isSorting, setIsSorting] = useState(false);\n  const [sortType, setSortType] = useState(\"bubble\");\n  const [canSort, setCanSort] = useState(true);\n  const [dataArray, setDataArray] = useState(initArray);\n  const [chartData, setChartData] = useState(initialChartValue);\n  const orangeValueRef = useRef(5);\n  const pinkValueRef = useRef(10);\n  const timeDelayRef = useRef(80);\n  const arrayRef = useRef(dataArray);\n  arrayRef.current = dataArray;\n  useEffect(() => {\n    timeDelayRef.current = calculateTimeDelay(dataArray.length, sortType);\n  }, [dataArray.length, sortType]);\n  useEffect(() => {\n    let colors = [];\n\n    if (isSorting) {\n      for (const number of arrayRef.current) {\n        if (number === orangeValueRef.current) colors.push(\"#FF7700\");else if (number === pinkValueRef.current) colors.push(\"#ff8686\");else colors.push(\"#377E86\");\n      }\n    } else {\n      orangeValueRef.current = 0;\n      pinkValueRef.current = 0;\n      colors = \"#377E86\";\n    }\n\n    setChartData({\n      labels: arrayRef.current,\n      datasets: [{\n        label: \"value\",\n        data: arrayRef.current,\n        backgroundColor: colors\n      }]\n    });\n  }, [dataArray, isSorting]);\n\n  async function updateAndPause(pinkValue, orangeValue = 0) {\n    await new Promise(resolve => setTimeout(resolve, timeDelayRef.current));\n    pinkValueRef.current = pinkValue;\n    orangeValueRef.current = orangeValue;\n    setDataArray([...dataArray]);\n  }\n\n  async function bubbleSort() {\n    let isSorted = false;\n\n    while (!isSorted) {\n      for (let i = 0; i < dataArray.length; i++) {\n        isSorted = true;\n\n        for (let j = 1; j < dataArray.length - i; j++) {\n          await updateAndPause(dataArray[j], dataArray[j - 1]);\n\n          if (dataArray[j] < dataArray[j - 1]) {\n            bubbleswap(dataArray, j, j - 1);\n            isSorted = false;\n          }\n        }\n      }\n    }\n  }\n\n  async function insertionSort() {\n    orangeValueRef.current = 0;\n\n    for (let i = 1; i < dataArray.length; i++) {\n      let current = dataArray[i];\n      let j = i - 1;\n\n      while (j >= 0 && dataArray[j] > current) {\n        dataArray[j + 1] = dataArray[j];\n        j--;\n        dataArray[j + 1] = current;\n        await updateAndPause(dataArray[j], dataArray[j + 1]);\n      }\n    }\n\n    setDataArray([...dataArray]);\n  }\n\n  async function selectionSort() {\n    for (let i = 0; i < dataArray.length; i++) {\n      let minimumIdx = i;\n\n      for (let j = i + 1; j < dataArray.length; j++) {\n        if (dataArray[j] < dataArray[minimumIdx]) {\n          minimumIdx = j;\n        }\n\n        await updateAndPause(dataArray[j], dataArray[minimumIdx]);\n      }\n\n      if (minimumIdx !== i) {\n        const temp = dataArray[minimumIdx];\n        dataArray[minimumIdx] = dataArray[i];\n        dataArray[i] = temp;\n      }\n    }\n\n    setDataArray([...dataArray]);\n  }\n\n  async function mergeSort() {\n    const length = dataArray.length;\n\n    for (let currentSize = 1; currentSize <= length - 1; currentSize = currentSize * 2) {\n      for (let leftStart = 0; leftStart < length - 1; leftStart += currentSize * 2) {\n        const middle = leftStart + currentSize - 1;\n        const rightEnd = Math.min(leftStart + currentSize * 2 - 1, length - 1);\n        await merge(dataArray, leftStart, middle, rightEnd);\n      }\n    }\n  }\n\n  async function merge(array, left, middle, right) {\n    const firstNumber = middle - left + 1;\n    const secondNumber = right - middle;\n    let i;\n    let j;\n    const leftTempArray = [firstNumber];\n    const rightTempArray = [secondNumber];\n\n    for (i = 0; i < firstNumber; i++) {\n      leftTempArray[i] = array[left + i];\n    }\n\n    for (j = 0; j < secondNumber; j++) {\n      rightTempArray[j] = array[middle + 1 + j];\n    }\n\n    i = 0;\n    j = 0;\n\n    while (i < firstNumber && j < secondNumber) {\n      if (leftTempArray[i] <= rightTempArray[j]) {\n        if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n        i++;\n        await updateAndPause(array[left - 1]);\n      } else {\n        if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n        j++;\n        await updateAndPause(array[left - 1]);\n      }\n\n      left++;\n    }\n\n    while (i < firstNumber) {\n      if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n      i++;\n      left++;\n      await updateAndPause(array[left - 1]);\n    }\n\n    await updateAndPause(0);\n\n    while (j < secondNumber) {\n      if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n      j++;\n      left++;\n      await updateAndPause(array[left - 1]);\n    }\n  }\n\n  async function performSort() {\n    setCanSort(false);\n    setIsSorting(true);\n\n    switch (sortType) {\n      case \"bubble\":\n        await bubbleSort();\n        break;\n\n      case \"insertion\":\n        await insertionSort();\n        break;\n\n      case \"merge\":\n        await mergeSort();\n        break;\n\n      case \"quick\":\n        // await quickSort();\n        break;\n\n      default:\n        await selectionSort();\n    }\n\n    setIsSorting(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"60vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        redraw: true,\n        data: chartData,\n        options: {\n          maintainAspectRatio: false,\n          animation: false,\n          legend: {\n            display: false\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), !isSorting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textTransform: \"capitalize\"\n        },\n        children: [sortType, \" Sort\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ActionButtons, {\n        performSort: performSort,\n        setCanSort: setCanSort,\n        dataArray: dataArray,\n        setDataArray: setDataArray,\n        canSort: canSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SizeSlider, {\n        value: dataArray.length,\n        setCanSort: setCanSort,\n        setDataArray: setDataArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SortTypes, {\n        setSortType: setSortType,\n        sortType: sortType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(DotAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Visualizer, \"+IvtKzrO71gDCv6KSP8pm7Ve20E=\");\n\n_c = Visualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"sources":["/home/stanzu10/Dev/git/sortit/Sort-It/src/components/Visualizer.tsx"],"names":["useState","useRef","useEffect","Bar","initialArray","initArray","initialChartValue","calculateTimeDelay","bubbleswap","DotAnimation","SortTypes","SizeSlider","ActionButtons","Visualizer","isSorting","setIsSorting","sortType","setSortType","canSort","setCanSort","dataArray","setDataArray","chartData","setChartData","orangeValueRef","pinkValueRef","timeDelayRef","arrayRef","current","length","colors","number","push","labels","datasets","label","data","backgroundColor","updateAndPause","pinkValue","orangeValue","Promise","resolve","setTimeout","bubbleSort","isSorted","i","j","insertionSort","selectionSort","minimumIdx","temp","mergeSort","currentSize","leftStart","middle","rightEnd","Math","min","merge","array","left","right","firstNumber","secondNumber","leftTempArray","rightTempArray","performSort","marginTop","width","height","display","justifyContent","margin","maintainAspectRatio","animation","legend","textTransform"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n    initialArray as initArray,\n    initialChartValue,\n} from \"./../helpers/initialValues\";\nimport { calculateTimeDelay } from \"../helpers/calculateTimeDelay\";\nimport { bubbleswap } from \"../helpers/bubbleswap\";\nimport { IChartData } from \"../helpers/interfaces\";\nimport DotAnimation from \"./DotAnimation\";\nimport SortTypes from \"./SortTypes\";\nimport SizeSlider from \"./SizeSlider\";\nimport ActionButtons from \"./ActionButtons\";\n\nexport default function Visualizer() {\n    const [isSorting, setIsSorting] = useState<boolean>(false);\n    const [sortType, setSortType] = useState<string>(\"bubble\");\n    const [canSort, setCanSort] = useState<boolean>(true);\n    const [dataArray, setDataArray] = useState<number[]>(initArray);\n    const [chartData, setChartData] = useState<IChartData>(initialChartValue);\n    const orangeValueRef = useRef<number>(5);\n    const pinkValueRef = useRef<number>(10);\n    const timeDelayRef = useRef<number>(80);\n    const arrayRef = useRef<number[]>(dataArray);\n    arrayRef.current = dataArray;\n\n    useEffect((): void => {\n        timeDelayRef.current = calculateTimeDelay(dataArray.length, sortType);\n    }, [dataArray.length, sortType]);\n\n    useEffect((): void => {\n        let colors: any = [];\n        if (isSorting) {\n            for (const number of arrayRef.current) {\n                if (number === orangeValueRef.current) colors.push(\"#FF7700\");\n                else if (number === pinkValueRef.current)\n                    colors.push(\"#ff8686\");\n                else colors.push(\"#377E86\");\n            }\n        } else {\n            orangeValueRef.current = 0;\n            pinkValueRef.current = 0;\n            colors = \"#377E86\";\n        }\n\n        setChartData({\n            labels: arrayRef.current,\n            datasets: [\n                {\n                    label: \"value\",\n                    data: arrayRef.current,\n                    backgroundColor: colors,\n                },\n            ],\n        });\n    }, [dataArray, isSorting]);\n\n    async function updateAndPause(\n        pinkValue: number,\n        orangeValue: number = 0\n    ): Promise<void> {\n        await new Promise((resolve: any) =>\n            setTimeout(resolve, timeDelayRef.current)\n        );\n        pinkValueRef.current = pinkValue;\n        orangeValueRef.current = orangeValue;\n        setDataArray([...dataArray]);\n    }\n\n    async function bubbleSort(): Promise<void> {\n        let isSorted: boolean = false;\n        while (!isSorted) {\n            for (let i = 0; i < dataArray.length; i++) {\n                isSorted = true;\n                for (let j = 1; j < dataArray.length - i; j++) {\n                    await updateAndPause(dataArray[j], dataArray[j - 1]);\n                    if (dataArray[j] < dataArray[j - 1]) {\n                        bubbleswap(dataArray, j, j - 1);\n                        isSorted = false;\n                    }\n                }\n            }\n        }\n    }\n\n    async function insertionSort(): Promise<void> {\n        orangeValueRef.current = 0;\n        for (let i = 1; i < dataArray.length; i++) {\n            let current: number = dataArray[i];\n            let j: number = i - 1;\n            while (j >= 0 && dataArray[j] > current) {\n                dataArray[j + 1] = dataArray[j];\n                j--;\n                dataArray[j + 1] = current;\n                await updateAndPause(dataArray[j], dataArray[j + 1]);\n            }\n        }\n        setDataArray([...dataArray]);\n    }\n\n    async function selectionSort(): Promise<void> {\n        for (let i = 0; i < dataArray.length; i++) {\n            let minimumIdx = i;\n            for (let j = i + 1; j < dataArray.length; j++) {\n                if (dataArray[j] < dataArray[minimumIdx]) {\n                    minimumIdx = j;\n                }\n                await updateAndPause(dataArray[j], dataArray[minimumIdx]);\n            }\n            if (minimumIdx !== i) {\n                const temp = dataArray[minimumIdx];\n                dataArray[minimumIdx] = dataArray[i];\n                dataArray[i] = temp;\n            }\n        }\n        setDataArray([...dataArray]);\n    }\n\n    async function mergeSort(): Promise<void> {\n        const length: number = dataArray.length;\n        for (\n            let currentSize: number = 1;\n            currentSize <= length - 1;\n            currentSize = currentSize * 2\n        ) {\n            for (\n                let leftStart = 0;\n                leftStart < length - 1;\n                leftStart += currentSize * 2\n            ) {\n                const middle = leftStart + currentSize - 1;\n                const rightEnd = Math.min(\n                    leftStart + currentSize * 2 - 1,\n                    length - 1\n                );\n                await merge(dataArray, leftStart, middle, rightEnd);\n            }\n        }\n    }\n\n    async function merge(\n        array: number[],\n        left: number,\n        middle: number,\n        right: number\n    ): Promise<void> {\n        const firstNumber: number = middle - left + 1;\n        const secondNumber: number = right - middle;\n        let i: number;\n        let j: number;\n\n        const leftTempArray: number[] = [firstNumber];\n        const rightTempArray: number[] = [secondNumber];\n\n        for (i = 0; i < firstNumber; i++) {\n            leftTempArray[i] = array[left + i];\n        }\n        for (j = 0; j < secondNumber; j++) {\n            rightTempArray[j] = array[middle + 1 + j];\n        }\n\n        i = 0;\n        j = 0;\n        while (i < firstNumber && j < secondNumber) {\n            if (leftTempArray[i] <= rightTempArray[j]) {\n                if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n                i++;\n                await updateAndPause(array[left - 1]);\n            } else {\n                if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n                j++;\n                await updateAndPause(array[left - 1]);\n            }\n            left++;\n        }\n        while (i < firstNumber) {\n            if (!!leftTempArray[i]) array[left] = leftTempArray[i];\n            i++;\n            left++;\n            await updateAndPause(array[left - 1]);\n        }\n        await updateAndPause(0);\n        while (j < secondNumber) {\n            if (!!leftTempArray[i]) array[left] = rightTempArray[j];\n            j++;\n            left++;\n            await updateAndPause(array[left - 1]);\n        }\n    }\n\n    async function performSort(): Promise<void> {\n        setCanSort(false);\n        setIsSorting(true);\n        switch (sortType) {\n            case \"bubble\":\n                await bubbleSort();\n                break;\n            case \"insertion\":\n                await insertionSort();\n                break;\n            case \"merge\":\n                await mergeSort();\n                break;\n            case \"quick\":\n                // await quickSort();\n                break;\n            default:\n                await selectionSort();\n        }\n        setIsSorting(false);\n    }\n\n    return (\n        <div style={{ marginTop: 20 }}>\n            <div\n                style={{\n                    width: \"70vw\",\n                    height: \"60vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"auto\",\n                }}>\n                <Bar\n                    redraw={true}\n                    data={chartData}\n                    options={{\n                        maintainAspectRatio: false,\n                        animation: false,\n                        legend: {\n                            display: false,\n                        },\n                    }}\n                />\n            </div>\n            {!isSorting ? (\n                <>\n                    <h2 style={{ textTransform: \"capitalize\" }}>\n                        {sortType} Sort\n                    </h2>\n                    <ActionButtons\n                        performSort={performSort}\n                        setCanSort={setCanSort}\n                        dataArray={dataArray}\n                        setDataArray={setDataArray}\n                        canSort={canSort}\n                    />\n                    <SizeSlider\n                        value={dataArray.length}\n                        setCanSort={setCanSort}\n                        setDataArray={setDataArray}\n                    />\n                    <hr />\n                    <SortTypes setSortType={setSortType} sortType={sortType} />\n                </>\n            ) : (\n                <DotAnimation />\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}